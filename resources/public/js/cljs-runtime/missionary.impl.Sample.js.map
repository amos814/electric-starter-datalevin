{"version":3,"sources":["missionary/impl/Sample.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__39619","js/Error","args39615","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Sample/Process","missionary.impl.Sample/->Process","combinator","notifier","terminator","args","inputs","busy","done","alive","_","fexpr__39637","p","missionary.impl.Sample/transfer","missionary.impl.Sample/ready","ps","sampled","cb","cljs.core/not","n__5636__auto__","i","input","cljs.core/deref","e39663","e39665","c","sampler","x","e39667","e39669","e","e39670","temp__5808__auto__","missionary.impl.Sample/dirty","e39676","missionary.impl.Sample/run","f","fs","n","t","it","cljs.core/iter","arity","cljs.core/count","cljs.core.object_array","fexpr__39683","index","flow","G__39684","G__39685","G__39687","G__39688"],"sourcesContent":["(ns ^:no-doc missionary.impl.Sample)\n\n(declare transfer)\n\n(deftype Process [combinator notifier terminator args inputs\n                  ^boolean busy ^boolean done ^number alive]\n  IFn\n  (-invoke [_] ((aget inputs (dec (alength inputs)))))\n  IDeref\n  (-deref [p] (transfer p)))\n\n(defn ready [^Process ps]\n  (let [args (.-args ps)\n        inputs (.-inputs ps)\n        sampled (dec (alength inputs))]\n    (loop [cb nil]\n      (if (set! (.-busy ps) (not (.-busy ps)))\n        (if (.-done ps)\n          (do (dotimes [i sampled]\n                (let [input (aget inputs i)]\n                  (input)\n                  (if (identical? (aget args i) args)\n                    (try @input (catch :default _))\n                    (aset args i args))))\n              (when (zero? (set! (.-alive ps) (dec (.-alive ps))))\n                (.-terminator ps)))\n          (if (identical? (aget args sampled) args)\n            (do (try @(aget inputs sampled)\n                     (catch :default _)) (recur cb))\n            (.-notifier ps))) cb))))\n\n(defn transfer [^Process ps]\n  (let [c (.-combinator ps)\n        args (.-args ps)\n        inputs (.-inputs ps)\n        sampled (dec (alength inputs))\n        sampler (aget inputs sampled)\n        x (try\n            (try\n              (when (nil? c) (throw (js/Error. \"Undefined continuous flow.\")))\n              (dotimes [i sampled]\n                (when (identical? (aget args i) args)\n                  (let [input (aget inputs i)]\n                    (loop []\n                      (aset args i nil)\n                      (let [x @input]\n                        (if (identical? (aget args i) args)\n                          (recur) (aset args i x)))))))\n              (catch :default e\n                (try @sampler (catch :default _))\n                (throw e)))\n            (aset args sampled @sampler)\n            (.apply c nil args)\n            (catch :default e\n              (set! (.-notifier ps) nil)\n              (sampler)\n              (aset args sampled args) e))]\n    (when-some [cb (ready ps)] (cb))\n    (if (nil? (.-notifier ps))\n      (throw x) x)))\n\n(defn dirty [^Process p ^number i]\n  (let [args (.-args p)]\n    (if (identical? (aget args i) args)\n      (try @(aget (.-inputs p) i)\n           (catch :default _))\n      (aset args i args))))\n\n(defn run [c f fs n t]\n  (let [it (iter fs)\n        arity (inc (count fs))\n        args (object-array arity)\n        inputs (object-array arity)\n        ps (->Process c n t args inputs false false arity)\n        done #(when (zero? (set! (.-alive ps) (dec (.-alive ps))))\n                ((.-terminator ps)))]\n    (loop [index 0 flow f]\n      (if (.hasNext it)\n        (do (aset inputs index (flow #(dirty ps index) done))\n            (when (nil? (aget args index)) (set! (.-combinator ps) nil))\n            (recur (inc index) (.next it)))\n        (aset inputs index\n          (flow #(when-some [cb (ready ps)] (cb))\n            #(do (set! (.-done ps) true)\n                 (when-some [cb (ready ps)]\n                   (cb))))))) ps))"]}