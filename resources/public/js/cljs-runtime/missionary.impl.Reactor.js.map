{"version":3,"sources":["missionary/impl/Reactor.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__39674","js/Error","args39666","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Reactor/Failer","missionary.impl.Reactor/->Failer","t","e","_","G__39692","args39691","missionary.impl.Reactor/Subscription","missionary.impl.Reactor/->Subscription","notifier","terminator","subscriber","subscribed","prev","next","this","missionary.impl.Reactor/unsubscribe","missionary.impl.Reactor/push","G__39719","args39718","missionary.impl.Reactor/Publisher","missionary.impl.Reactor/->Publisher","process","iterator","ranks","pending","children","live","busy","done","value","child","sibling","active","subs","missionary.impl.Reactor/free","n","missionary.impl.Reactor/subscribe","G__39777","args39776","missionary.impl.Reactor/Process","missionary.impl.Reactor/->Process","success","failure","result","kill","boot","alive","current","reaction","schedule","delayed","missionary.impl.Reactor/event","missionary.impl.Reactor/stale","missionary.impl.Reactor/error","missionary.impl.Reactor/current","missionary.impl.Reactor/delayed","missionary.impl.Reactor/lt","x","y","xl","yl","ml","x__5133__auto__","y__5134__auto__","i","xi","yi","missionary.impl.Reactor/link","missionary.impl.Reactor/dequeue","pub","head","heap","missionary.impl.Reactor/schedule","ps","temp__5806__auto__","sch","missionary.impl.Reactor/pull","cur","e39817","cljs.core/deref","k","cljs.core/not","missionary.impl.Reactor/sample","missionary.impl.Reactor/touch","prv","nxt","missionary.impl.Reactor/ack","missionary.impl.Reactor/propagate","temp__5808__auto__","s","fexpr__39844","r","missionary.impl.Reactor/hook","fexpr__39866","p","missionary.impl.Reactor/cancel","fexpr__39888","missionary.impl.Reactor/failer","sub","fexpr__39911","fexpr__39913","js/missionary.Cancelled","cb","G__39921","G__39922","missionary.impl.Reactor/kill","js/missionary","js/missionary.impl","js/missionary.impl.Reactor","js/missionary.impl.Reactor.t_missionary$impl$Reactor39925","missionary.impl.Reactor/t_missionary$impl$Reactor39925","_39927","meta39926","missionary.impl.Reactor/->t_missionary$impl$Reactor39925","missionary.impl.Reactor/zero","cljs.core.object_array","missionary.impl.Reactor/run","init","f","b","js/missionary.impl.Reactor.t_missionary$impl$Reactor39946","missionary.impl.Reactor/t_missionary$impl$Reactor39946","_39948","meta39947","missionary.impl.Reactor/->t_missionary$impl$Reactor39946","missionary.impl.Reactor/publish","flow","continuous","G__39976","a","js/Array","n__5636__auto__","G__39978","G__39979","G__39990","G__39992"],"sourcesContent":["(ns missionary.impl.Reactor\n  (:import missionary.Cancelled))\n\n(declare unsubscribe push free subscribe event)\n\n(deftype Failer [t e]\n  IFn\n  (-invoke [_])\n  IDeref\n  (-deref [_] (t) (throw e)))\n\n(deftype Subscription [notifier terminator subscriber subscribed prev next]\n  IFn\n  (-invoke [this] (unsubscribe this) nil)\n  IDeref\n  (-deref [this] (push this)))\n\n(deftype Publisher [process iterator ranks ^number pending ^number children ^boolean live ^boolean busy ^boolean done\n                    value prev next child sibling active subs]\n  IFn\n  (-invoke [this] (free this) nil)\n  (-invoke [this n t] (subscribe this n t)))\n\n(deftype Process [success failure result kill boot alive active current reaction schedule subscriber delayed]\n  IFn\n  (-invoke [_] (event kill) nil))\n\n(def stale (js-obj))\n(def error (js-obj))\n\n(def ^Process current nil)\n(def ^Process delayed nil)\n\n(defn ^boolean lt [x y]\n  (if (nil? x)\n    true\n    (if (nil? y)\n      false\n      (let [xl (alength x)\n            yl (alength y)\n            ml (min xl yl)]\n        (loop [i 0]\n          (if (< i ml)\n            (let [xi (aget x i)\n                  yi (aget y i)]\n              (if (== xi yi)\n                (recur (inc i))\n                (< xi yi)))\n            (> xl yl)))))))\n\n(defn link [^Publisher x ^Publisher y]\n  (if (lt (.-ranks x) (.-ranks y))\n    (do (set! (.-sibling y) (.-child x))\n        (set! (.-child x) y) x)\n    (do (set! (.-sibling x) (.-child y))\n        (set! (.-child y) x) y)))\n\n(defn dequeue [^Publisher pub]\n  (let [head (.-child pub)]\n    (set! (.-child pub) nil)\n    (loop [heap nil\n           prev nil\n           head head]\n      (if (nil? head)\n        (if (nil? prev) heap (if (nil? heap) prev (link heap prev)))\n        (let [next (.-sibling head)]\n          (set! (.-sibling head) nil)\n          (if (nil? prev)\n            (recur heap head next)\n            (let [head (link prev head)]\n              (recur (if (nil? heap) head (link heap head)) nil next))))))))\n\n(defn schedule [^Publisher pub]\n  (let [ps (.-process pub)]\n    (if-some [sch (.-schedule ps)]\n      (set! (.-schedule ps) (link pub sch))\n      (do (set! (.-schedule ps) pub)\n          (set! (.-delayed ps) delayed)\n          (set! delayed ps)))))\n\n(defn pull [^Publisher pub]\n  (let [ps (.-process pub)\n        cur (.-subscriber ps)]\n    (set! (.-subscriber ps) pub)\n    (set! (.-value pub) error)\n    (try\n      (set! (.-value pub) @(.-iterator pub))\n      (catch :default e\n        (when (identical? ps (.-result ps))\n          (set! (.-result ps) e)\n          (let [k (.-kill ps)]\n            (when (set! (.-busy k) (not (.-busy k)))\n              (schedule k))))))\n    (set! (.-subscriber ps) cur)))\n\n(defn sample [^Publisher pub]\n  (loop []\n    (pull pub)\n    (when (set! (.-busy pub) (not (.-busy pub)))\n      (if (.-done pub)\n        (schedule pub)\n        (recur)))))\n\n(defn touch [^Publisher pub]\n  (let [ps (.-process pub)]\n    (if (.-done pub)\n      (let [prv (.-prev pub)]\n        (set! (.-prev pub) nil)\n        (if (identical? pub prv)\n          (set! (.-alive ps) nil)\n          (let [nxt (.-next pub)]\n            (set! (.-prev nxt) prv)\n            (set! (.-next prv) nxt)\n            (when (identical? pub (.-alive ps))\n              (set! (.-alive ps) prv)))))\n      (if (identical? pub (.-active pub))\n        (do (set! (.-active pub) (.-active ps))\n            (set! (.-active ps) pub)\n            (set! (.-pending pub) 1)\n            (pull pub))\n        (if (.-live pub)\n          (set! (.-value pub) stale)\n          (sample pub))))))\n\n(defn ack [^Publisher pub]\n  (when (zero? (set! (.-pending pub) (dec (.-pending pub))))\n    (set! (.-value pub) nil)\n    (when (set! (.-busy pub) (not (.-busy pub)))\n      (schedule pub))))\n\n(defn propagate [^Publisher pub]\n  (let [ps (.-process pub)]\n    (set! current ps)\n    (loop [pub pub]\n      (set! (.-reaction ps) (dequeue pub))\n      (set! (.-current ps) pub)\n      (touch pub)\n      (when-some [t (.-subs pub)]\n        (set! (.-subs pub) nil)\n        (loop [s t]\n          (let [s (.-next s)]\n            (set! (.-prev s) nil)\n            (when-not (identical? s t)\n              (recur s))))\n        (loop [n (.-next t)]\n          (let [s n\n                n (.-next s)]\n            (set! (.-next s) nil)\n            (when (pos? (.-pending pub))\n              (set! (.-pending pub) (inc (.-pending pub))))\n            (set! (.-subscriber ps) (.-subscriber s))\n            ((if (nil? (.-prev pub))\n               (.-terminator s)\n               (.-notifier s)))\n            (set! (.-subscriber ps) nil)\n            (when-not (identical? s t)\n              (recur n)))))\n      (when-some [r (.-reaction ps)]\n        (recur r)))\n    (set! (.-current ps) nil)\n    (set! current nil)\n    (loop []\n      (when-some [pub (.-active ps)]\n        (set! (.-active ps) (.-active pub))\n        (set! (.-active pub) (when-not (identical? error (.-value pub)) pub))\n        (ack pub)\n        (recur)))\n    (when (nil? (.-alive ps))\n      (when-some [pub (.-boot ps)]\n        (set! (.-boot ps) nil)\n        (if (identical? (.-result ps) ps)\n          (do (set! (.-result ps) (.-value pub))\n              (.-success ps)) (.-failure ps))))))\n\n(defn hook [^Subscription s]\n  (let [pub (.-subscribed s)]\n    (if (nil? (.-prev pub))\n      ((.-terminator s))\n      (let [p (.-subs pub)]\n        (set! (.-subs pub) s)\n        (if (nil? p)\n          (->> s\n            (set! (.-prev s))\n            (set! (.-next s)))\n          (let [n (.-next p)]\n            (set! (.-next p) s)\n            (set! (.-prev n) s)\n            (set! (.-prev s) p)\n            (set! (.-next s) n)))))))\n\n(defn cancel [^Publisher pub]\n  (when (.-live pub)\n    (set! (.-live pub) false)\n    (let [ps (.-process pub)\n          cur (.-subscriber ps)]\n      (set! (.-subscriber ps) pub)\n      ((.-iterator pub))\n      (set! (.-subscriber ps) cur)\n      (when (identical? stale (.-value pub))\n        (sample pub)))))\n\n(defn failer [n t e]\n  (n) (->Failer t e))\n\n(defn free [^Publisher pub]\n  (when-not (identical? (.-process pub) current)\n    (throw (js/Error. \"Cancellation failure : not in reactor context.\")))\n  (cancel pub))\n\n(defn subscribe [^Publisher pub n t]\n  (let [ps (.-process pub)\n        sub (.-subscriber ps)]\n    (if-not (identical? ps current)\n      (failer n t (js/Error. \"Subscription failure : not in reactor context.\"))\n      (if (identical? sub (.-boot ps))\n        (failer n t (js/Error. \"Subscription failure : not a subscriber.\"))\n        (let [s (->Subscription n t sub pub nil nil)]\n          (if (identical? (.-active pub) pub)\n            (hook s)\n            (do (when (pos? (.-pending pub))\n                  (set! (.-pending pub) (inc (.-pending pub))))\n                (n))) s)))))\n\n(defn unsubscribe [^Subscription s]\n  (let [sub (.-subscriber s)\n        ps (.-process sub)]\n    (when-not (identical? ps current)\n      (throw (js/Error. \"Unsubscription failure : not in reactor context.\")))\n    (when-some [pub (.-subscribed s)]\n      (set! (.-subscribed s) nil)\n      (if-some [p (.-prev s)]\n        (let [n (.-next s)]\n          (set! (.-prev s) nil)\n          (set! (.-next s) nil)\n          (if (identical? p s)\n            (set! (.-subs pub) nil)\n            (do (set! (.-prev n) p)\n                (set! (.-next p) n)\n                (when (identical? s (.-subs pub))\n                  (set! (.-subs pub) p))))\n          (let [cur (.-subscriber ps)]\n            (set! (.-subscriber ps) sub)\n            ((.-notifier s))\n            (set! (.-subscriber ps) cur)))\n        (when (pos? (.-pending pub)) (ack pub))))))\n\n(defn push [^Subscription s]\n  (let [sub (.-subscriber s)\n        ps (.-process sub)]\n    (when-not (identical? ps current)\n      (throw (js/Error. \"Transfer failure : not in reactor context.\")))\n    (let [value (if-some [pub (.-subscribed s)]\n                  (let [value (.-value pub)]\n                    (if (pos? (.-pending pub))\n                      (do (ack pub) value)\n                      (if (identical? value stale)\n                        (do (sample pub) (.-value pub))\n                        value))) error)\n          cur (.-subscriber ps)]\n      (set! (.-subscriber ps) sub)\n      (if (identical? value error)\n        (do ((.-terminator s))\n            (set! (.-subscriber ps) cur)\n            (throw (Cancelled. \"Subscription cancelled.\")))\n        (do (hook s)\n            (set! (.-subscriber ps) cur)\n            value)))))\n\n(defn event [^Publisher pub]\n  (if-some [ps current]\n    (when (set! (.-busy pub) (not (.-busy pub)))\n      (if (identical? ps (.-process pub))\n        (if (lt (.-ranks (.-current ps)) (.-ranks pub))\n          (set! (.-reaction ps)\n            (if-some [r (.-reaction ps)]\n              (link pub r) pub))\n          (schedule pub))\n        (schedule pub)))\n    (do (when (set! (.-busy pub) (not (.-busy pub)))\n          (when-some [cb (propagate pub)]\n            (cb (.-result (.-process pub)))))\n        (loop []\n          (when-some [ps delayed]\n            (set! delayed (.-delayed ps))\n            (set! (.-delayed ps) nil)\n            (let [pub (.-schedule ps)]\n              (set! (.-schedule ps) nil)\n              (when-some [cb (propagate pub)]\n                (cb (.-result ps)))\n              (recur)))))))\n\n(def kill\n  (reify\n    IDeref\n    (-deref [_]\n      (let [ps current]\n        (when-some [t (.-alive ps)]\n          (loop [pub (.-next t)]\n            (cancel pub)\n            (when-some [t (.-alive ps)]\n              (let [pub (loop [pub pub]\n                          (let [pub (.-next pub)]\n                            (if (nil? (.-prev pub))\n                              (recur pub) pub)))]\n                (when-not (identical? pub (.-next t))\n                  (recur pub)))))) true))))\n\n(def zero (object-array 0))\n\n(defn run [init s f]\n  (let [ps (->Process s f nil nil nil nil nil nil nil nil nil nil)\n        k (->Publisher ps kill nil 0 0 false false false false nil nil nil nil nil nil)\n        b (->Publisher ps (reify IDeref (-deref [_] (init))) zero 0 0 false false false nil nil nil nil nil nil nil)]\n    (set! (.-kill ps) k)\n    (set! (.-boot ps) b)\n    (set! (.-result ps) ps)\n    (event b) ps))\n\n(defn publish [flow continuous]\n  (let [ps (doto current (-> nil? (when (throw (js/Error. \"Publication failure : not in reactor context.\")))))\n        cur (.-subscriber ps)\n        pub (->Publisher\n              ps nil\n              (let [n (alength (.-ranks cur))\n                    a (make-array (inc n))]\n                (dotimes [i n] (aset a i (aget (.-ranks cur) i)))\n                (doto a (aset n (doto (.-children cur) (->> (inc) (set! (.-children cur)))))))\n              0 0 true true false nil nil nil nil nil nil nil)]\n    (when-not continuous (set! (.-active pub) pub))\n    (if-some [p (.-alive ps)]\n      (let [n (.-next p)]\n        (set! (.-next p) pub)\n        (set! (.-prev n) pub)\n        (set! (.-prev pub) p)\n        (set! (.-next pub) n))\n      (->> pub\n        (set! (.-prev pub))\n        (set! (.-next pub))))\n    (set! (.-alive ps) pub)\n    (set! (.-subscriber ps) pub)\n    (set! (.-iterator pub)\n      (flow #(event pub)\n        #(do (set! (.-done pub) true)\n             (event pub))))\n    (set! (.-subscriber ps) cur)\n    (when (.-value (.-kill ps)) (cancel pub))\n    (if (set! (.-busy pub) (not (.-busy pub)))\n      (touch pub)\n      (when continuous\n        (cancel pub)\n        (throw (js/Error. \"Publication failure : undefined continuous flow.\"))))\n    pub))"]}