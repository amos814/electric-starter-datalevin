{"version":3,"sources":["missionary/impl/Latest.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__39655","js/Error","args39653","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Latest/Process","missionary.impl.Latest/->Process","combinator","notifier","terminator","value","args","inputs","dirty","alive","ps","missionary.impl.Latest/kill","missionary.impl.Latest/transfer","n__5636__auto__","i","fexpr__39664","c","x","e39668","missionary.impl.Heap/dequeue","p","cljs.core/deref","cljs.core._EQ_","missionary.impl.Heap/size","e","e39671","_","fexpr__39675","missionary.impl.Latest/run","fs","n","t","it","cljs.core/iter","arity","cljs.core/count","cljs.core.object_array","missionary.impl.Heap/create","done","fexpr__39679","index","G__39681","G__39682","fexpr__39680","missionary.impl.Heap/enqueue","temp__5806__auto__","e39686"],"sourcesContent":["(ns ^:no-doc missionary.impl.Latest\n  (:require [missionary.impl.Heap :as h]))\n\n(declare kill transfer)\n\n(deftype Process [combinator notifier terminator value args inputs dirty ^number alive]\n  IFn\n  (-invoke [ps] (kill ps))\n  IDeref\n  (-deref [ps] (transfer ps)))\n\n(defn kill [^Process ps]\n  (let [inputs (.-inputs ps)]\n    (dotimes [i (alength inputs)]\n      ((aget inputs i)))))\n\n(defn transfer [^Process ps]\n  (let [c (.-combinator ps)\n        args (.-args ps)\n        inputs (.-inputs ps)\n        dirty (.-dirty ps)\n        x (.-value ps)\n        x (try (set! (.-value ps) ps)\n               (when (nil? args) (throw (js/Error. \"Undefined continuous flow.\")))\n               (loop [x x]\n                 (let [i (h/dequeue dirty)\n                       p (aget args i)]\n                   (aset args i @(aget inputs i))\n                   (let [x (if (identical? x ps)\n                             x (if (= p (aget args i))\n                                 x ps))]\n                     (if (zero? (h/size dirty))\n                       (if (identical? x ps)\n                         (let [x (.apply c nil args)]\n                           (if (zero? (h/size dirty))\n                             x (recur x))) x)\n                       (recur x)))))\n               (catch :default e\n                 (kill ps)\n                 (loop []\n                   (when (pos? (h/size dirty))\n                     (try @(aget inputs (h/dequeue dirty))\n                          (catch :default _)) (recur)))\n                 (set! (.-notifier ps) nil) e))]\n    (set! (.-value ps) x)\n    (when (zero? (.-alive ps))\n      ((.-terminator ps)))\n    (if (nil? (.-notifier ps))\n      (throw x) x)))\n\n(defn run [c fs n t]\n  (let [it (iter fs)\n        arity (count fs)\n        args (object-array arity)\n        inputs (object-array arity)\n        dirty (h/create arity)\n        ps (->Process c n t nil nil inputs dirty arity)\n        done #(when (zero? (set! (.-alive ps) (dec (.-alive ps))))\n                (when-not (identical? (.-value ps) ps)\n                  ((.-terminator ps))))]\n    (set! (.-value ps) ps)\n    (dotimes [index arity]\n      (aset inputs index\n        ((.next it)\n         #(do (h/enqueue dirty index)\n              (when (== 1 (h/size dirty))\n                (when-not (identical? (.-value ps) ps)\n                  (if-some [n (.-notifier ps)]\n                    (n) (loop []\n                          (try @(aget inputs (h/dequeue dirty))\n                               (catch :default _))\n                          (when (pos? (h/size dirty))\n                            (recur))))))) done)))\n    (when (== (h/size dirty) arity)\n      (set! (.-args ps) args)) (n) ps))"]}