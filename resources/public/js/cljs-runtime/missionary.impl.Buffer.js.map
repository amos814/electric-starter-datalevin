{"version":3,"sources":["missionary/impl/Buffer.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__39993","js/Error","args39987","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Buffer/Process","missionary.impl.Buffer/->Process","notifier","terminator","iterator","buffer","failed","size","push","pull","busy","done","ps","missionary.impl.Buffer/kill","missionary.impl.Buffer/transfer","missionary.impl.Buffer/more","cb","cljs.core/not","i","s","e40073","cljs.core/deref","e","n","f","x","temp__5808__auto__","fexpr__40080","G__40085","args40083","missionary.impl.Buffer/Flow","missionary.impl.Buffer/->Flow","capacity","input","_","t","cljs.core.object_array","G__40096","G__40097","missionary.impl.Buffer/flow"],"sourcesContent":["(ns missionary.impl.Buffer)\n\n(declare kill transfer)\n(deftype Process\n  [notifier terminator\n   iterator buffer\n   ^number failed\n   ^number size\n   ^number push\n   ^number pull\n   ^boolean busy\n   ^boolean done]\n  IFn\n  (-invoke [ps] (kill ps))\n  IDeref\n  (-deref [ps] (transfer ps)))\n\n(defn more [^Process ps]\n  (let [buffer (.-buffer ps)]\n    (loop [cb nil]\n      (if (set! (.-busy ps) (not (.-busy ps)))\n        (let [i (.-push ps)\n              s (.-size ps)]\n          (set! (.-push ps) (js-mod (inc i) (alength buffer)))\n          (let [cb (if (zero? s) (if (.-done ps) (.-terminator ps) (.-notifier ps)) cb)]\n            (if (.-done ps)\n              (aset buffer i ps)\n              (try (aset buffer i @(.-iterator ps))\n                   (catch :default e\n                     (set! (.-failed ps) i)\n                     (aset buffer i e))))\n            (if (== (set! (.-size ps) (inc s)) (alength buffer))\n              cb (recur cb)))) cb))))\n\n(defn transfer [^Process ps]\n  (let [buffer (.-buffer ps)\n        i (.-pull ps)\n        s (.-size ps)\n        n (js-mod (inc i) (alength buffer))\n        f (== i (.-failed ps))\n        x (aget buffer i)]\n    (aset buffer i nil)\n    (set! (.-pull ps) n)\n    (set! (.-size ps) (dec s))\n    (let [cb (when (== s (alength buffer)) (more ps))]\n      (when-some [cb (if (== s 1)\n                       cb (if (identical? (aget buffer n) ps)\n                            (.-terminator ps) (.-notifier ps)))]\n        (cb))) (if f (throw x) x)))\n\n(defn kill [^Process ps]\n  ((.-iterator ps)))\n\n(deftype Flow [capacity input]\n  IFn\n  (-invoke [_ n t]\n    (let [ps (->Process n t nil (object-array capacity) -1 0 0 0 true false)]\n      (set! (.-iterator ps)\n        (input #(when-some [cb (more ps)] (cb))\n          #(do (set! (.-done ps) true)\n               (when-some [cb (more ps)] (cb)))))\n      (when-some [cb (more ps)] (cb)) ps)))\n\n(def flow ->Flow)"]}