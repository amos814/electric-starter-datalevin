{"version":3,"sources":["missionary/impl/Ambiguous.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__39806","js/Error","args39799","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Ambiguous/Process","missionary.impl.Ambiguous/->Process","notifier","terminator","head","tail","child","this","missionary.impl.Ambiguous/kill","missionary.impl.Ambiguous/transfer","cljs.core/PROTOCOL_SENTINEL","missionary.impl.Ambiguous/Branch","missionary.impl.Ambiguous/->Branch","parent","prev","next","queue","choice","current","_","js/missionary.Cancelled","task","missionary.impl.Ambiguous/suspend","flow","par","missionary.impl.Ambiguous/resume","missionary.impl.Ambiguous/Choice","missionary.impl.Ambiguous/->Choice","branch","coroutine","iterator","parallelism","live","busy","done","missionary.impl.Ambiguous/Processor","missionary.impl.Ambiguous/->Processor","missionary.impl.Ambiguous/nop","missionary.impl.Ambiguous/boot","cr","c","missionary.impl.Ambiguous/ready","missionary.impl.Ambiguous/backtrack","p","b","e39840","cljs.core/deref","fexpr__39843","e","missionary.impl.Ambiguous/choose","n","missionary.impl.Ambiguous/branch","curr","missionary.impl.Ambiguous/root","node","ps","temp__5808__auto__","G__39860","missionary.impl.Ambiguous/walk","missionary.impl.Ambiguous/cancel","fexpr__39871","t","pr","G__39881","G__39885","missionary.impl.Ambiguous/move","x","y","xx","yy","missionary.impl.Ambiguous/discard","br","missionary.impl.Ambiguous/ack","missionary.impl.Ambiguous/done","missionary.impl.Ambiguous/all","cb","q","temp__5806__auto__","swap","cljs.core/not","missionary.impl.Fiber/fiber","e39928","fexpr__39929","pivot","cljs.core/pr","G__39941","G__39942","fexpr__39949","missionary.impl.Ambiguous/run"],"sourcesContent":["(ns ^:no-doc missionary.impl.Ambiguous\n  (:require [missionary.impl.Fiber :refer [Fiber fiber]])\n  (:import missionary.Cancelled))\n\n(declare kill transfer suspend resume ready walk)\n\n(deftype Process [notifier terminator head tail child]\n  IFn\n  (-invoke [this] (kill this) nil)\n  IDeref\n  (-deref [this] (transfer this)))\n\n(deftype Branch [parent prev next queue choice current]\n  Fiber\n  (check [_] (when-not (.-live choice) (throw (Cancelled. \"Process cancelled.\"))))\n  (park [this task] (suspend this nil task))\n  (swich [this flow] (suspend this -1 flow))\n  (fork [this par flow] (suspend this par flow))\n  (unpark [this] (resume this)))\n\n(deftype Choice [branch prev next coroutine iterator ^number parallelism ^boolean live ^boolean busy ^boolean done])\n(deftype Processor [branch prev next child])\n\n(defn nop [])\n\n(defn boot [cr ^Choice c]\n  (set! (.-coroutine c) cr)\n  (ready c))\n\n(defn backtrack [^Choice p ^Branch b ^Choice c]\n  (try (set! (.-iterator c) nop)\n       (set! (.-choice b) c)\n       (set! (.-current b) @(.-iterator p))\n       ((.-coroutine p) boot c)\n       (catch :default e\n         (set! (.-done c) true)\n         (set! (.-current b) e)\n         (boot (.-coroutine p) c))))\n\n(defn choose [^Choice p]\n  (let [b (.-branch p)\n        n (.-next p)]\n    (->> (->Choice b p n nil nil nil (.-live p) false false)\n      (set! (.-next p))\n      (set! (.-prev n))\n      (backtrack p b))))\n\n(defn branch [^Choice p]\n  (set! (.-parallelism p) (dec (.-parallelism p)))\n  (let [parent (.-branch p)\n        prev (.-current parent)\n        curr (->Processor parent nil nil nil)\n        b (->Branch curr nil nil nil nil nil)\n        c (->Choice b nil nil nil nil nil (.-live p) false false)]\n    (set! (.-current parent) curr)\n    (if (nil? prev)\n      (->> curr\n        (set! (.-prev curr))\n        (set! (.-next curr)))\n      (let [next (.-next prev)]\n        (->> curr\n          (set! (.-prev next))\n          (set! (.-next prev)))\n        (set! (.-prev curr) prev)\n        (set! (.-next curr) next)))\n    (->> b\n      (set! (.-prev b))\n      (set! (.-next b))\n      (set! (.-child curr)))\n    (->> c\n      (set! (.-prev c))\n      (set! (.-next c))\n      (backtrack p b))))\n\n(defn root [^Branch b]\n  (loop [node (.-parent b)]\n    (if (instance? Processor node)\n      (recur (.-parent (.-branch ^Processor node)))\n      (if (instance? Branch node)\n        (recur (.-parent ^Branch node))\n        node))))\n\n(defn kill [^Process ps]\n  (when-some [b (.-child ps)]\n    (walk (.-next b))))\n\n(defn cancel [^Choice c]\n  (let [b (.-branch c)]\n    (loop [c c]\n      (when (.-live c)\n        (set! (.-live c) false)\n        ((.-iterator c))\n        (when-some [t (.-choice b)]\n          (let [c (loop [c c]\n                    (let [c (.-next c)]\n                      (if (nil? (.-prev c))\n                        (recur c) c)))]\n            (if (identical? c (.-next t))\n              (let [curr (.-current b)]\n                (if (instance? Processor curr)\n                  (loop [pr ^Processor curr]\n                    (walk (.-next (.-child pr)))\n                    (when-some [curr (.-current b)]\n                      (let [pr (loop [pr pr]\n                                 (let [pr (.-next pr)]\n                                   (if (nil? (.-prev pr))\n                                     (recur pr) pr)))]\n                        (when-not (identical? pr (.-next ^Processor curr))\n                          (recur pr)))))\n                  (when (instance? Branch curr)\n                    (walk (.-next ^Branch curr)))))\n              (recur c))))))))\n\n(defn walk [^Branch b]\n  (loop [b b]\n    (cancel (.-next (.-choice b)))\n    (let [node (.-parent b)]\n      (when-some [t (if (instance? Processor node)\n                      (.-child ^Processor node)\n                      (if (instance? Branch node)\n                        (.-current ^Branch node)\n                        (.-child ^Process node)))]\n        (let [b (loop [b b]\n                  (let [b (.-next b)]\n                    (if (nil? (.-prev b))\n                      (recur b) b)))]\n          (when-not (identical? b (.-next t))\n            (recur b)))))))\n\n(defn move [^Branch x ^Branch y]\n  (let [p (.-parent x)]\n    (loop [b y]\n      (let [b (.-next b)]\n        (set! (.-parent b) p)\n        (when-not (identical? b y)\n          (recur b)))))\n  (let [xx (.-next x)\n        yy (.-next y)]\n    (set! (.-next x) yy)\n    (set! (.-prev yy) x)\n    (set! (.-next y) xx)\n    (set! (.-prev xx) y)))\n\n(defn discard [^Branch b]\n  (let [parent (.-parent b)\n        prev (.-prev b)\n        next (.-next b)]\n    (set! (.-prev b) nil)\n    (set! (.-choice b) nil)\n    (set! (.-current b) nil)\n    (if (instance? Branch parent)\n      (let [br ^Branch parent]\n        (if (identical? b prev)\n          (let [c (.-choice br)]\n            (set! (.-current b) nil)\n            (when (.-busy c)\n              (when (.-done c)\n                (set! (.-busy c) false)\n                (set! (.-done c) false)\n                (choose c))))\n          (do (set! (.-next prev) next)\n              (set! (.-prev next) prev)\n              (when (identical? b (.-current br))\n                (set! (.-current br) prev)) nil)))\n      (if (instance? Processor parent)\n        (let [pr ^Processor parent]\n          (if (identical? b prev)\n            (let [b (.-branch pr)\n                  c (.-choice b)\n                  p (.-prev pr)\n                  n (.-next pr)]\n              (set! (.-child pr) nil)\n              (set! (.-prev pr) nil)\n              (if (identical? pr p)\n                (set! (.-current b) nil)\n                (do (set! (.-next p) n)\n                    (set! (.-prev n) p)\n                    (set! (.-current b) p)))\n              (set! (.-parallelism c) (inc (.-parallelism c)))\n              (when (.-busy c)\n                (when (.-done c)\n                  (set! (.-busy c) false)\n                  (set! (.-done c) false)\n                  (branch c))))\n            (do (set! (.-next prev) next)\n                (set! (.-prev next) prev)\n                (when (identical? b (.-child pr))\n                  (set! (.-child pr) prev)) nil)))\n        (let [ps ^Process parent]\n          (if (identical? b prev)\n            (do (set! (.-child ps) nil)\n                (.-terminator ps))\n            (do (set! (.-next prev) next)\n                (set! (.-prev next) prev)\n                (when (identical? b (.-child ps))\n                  (set! (.-child ps) prev)) nil)))))))\n\n(defn ack [^Choice c]\n  (when (.-busy c)\n    (when (.-done c)\n      (set! (.-busy c) false)\n      (set! (.-done c) false)\n      (if (neg? (.-parallelism c))\n        (choose c) (branch c)))))\n\n(defn done [^Branch b]\n  (let [c (.-choice b)\n        p (.-prev c)]\n    (set! (.-prev c) nil)\n    (set! (.-queue b) nil)\n    (if (identical? p c)\n      (discard b)\n      (let [n (.-next c)]\n        (set! (.-prev n) p)\n        (set! (.-next p) n)\n        (set! (.-choice b) p)\n        (set! (.-current b) nil)\n        (ack p)))))\n\n(defn all [^Branch n]\n  (loop [n n cb nil]\n    (if (nil? n)\n      cb (recur (.-queue n)\n           (done n)))))\n\n(defn transfer [^Process ps]\n  (let [b (.-head ps)\n        q (.-queue b)\n        x (.-current b)]\n    (when-some [cb (if (.-done (.-choice b))\n                     (do (set! (.-notifier ps) nil)\n                         (kill ps)\n                         (let [cb (done b)\n                               cb (if (nil? cb) (all q) cb)\n                               cb (if (nil? cb) (all (.-tail ps)) cb)]\n                           (set! (.-head ps) nil)\n                           (set! (.-tail ps) nil) cb))\n                     (let [cb (done b)]\n                       (if (nil? q)\n                         (if-some [prev (.-tail ps)]\n                           (do (set! (.-tail ps) nil)\n                               (set! (.-head ps)\n                                 (loop [prev prev\n                                        next nil]\n                                   (let [swap (.-queue prev)]\n                                     (set! (.-queue prev) next)\n                                     (if (nil? swap) prev (recur swap prev)))))\n                               (.-notifier ps))\n                           (do (set! (.-head ps) nil) cb))\n                         (do (set! (.-head ps) q) (.-notifier ps)))))]\n      (cb)) (if (nil? (.-notifier ps)) (throw x) x)))\n\n(defn ready [^Choice c]\n  (when (set! (.-busy c) (not (.-busy c)))\n    (loop []\n      (let [b (.-branch c)\n            par (.-parallelism c)\n            curr (.-current b)]\n        (if (nil? par)\n          (let [prev fiber\n                x (try (set! fiber b)\n                       ((.-coroutine c))\n                       (catch :default e\n                         (set! (.-done c) true) e))]\n            (set! fiber prev)\n            (if (identical? x b)\n              (when (set! (.-busy c) (not (.-busy c))) (recur))\n              (let [ps (root b)]\n                (set! (.-current b) x)\n                (if-some [n (.-notifier ps)]\n                  (if (nil? (.-head ps))\n                    (do (set! (.-head ps) b) n)\n                    (do (set! (.-queue b) (.-tail ps))\n                        (set! (.-tail ps) b) nil))\n                  (done b)))))\n          (if (.-done c)\n            (let [p (.-prev c)]\n              (set! (.-prev c) nil)\n              (if (identical? c p)\n                (do (if (instance? Branch curr)\n                      (move b curr)\n                      (when (instance? Processor curr)\n                        (loop [pr ^Processor curr]\n                          (let [pr (.-next pr)]\n                            (move b (.-child pr))\n                            (when-not (identical? pr (.-current b))\n                              (recur pr))))))\n                    (discard b))\n                (let [n (.-next c)]\n                  (set! (.-prev n) p)\n                  (set! (.-next p) n)\n                  (when (identical? c (.-choice b))\n                    (set! (.-choice b) p)\n                    (if (nil? curr)\n                      (ack p)\n                      (when (instance? Processor curr)\n                        (let [pivot (.-child pr)]\n                          (set! (.-current b) pivot)\n                          (set! (.-parent pivot) b)\n                          (loop [pr ^Processor curr]\n                            (let [pr (.-next pr)]\n                              (when-not (identical? pr curr)\n                                (move pivot (.-child pr)))))\n                          (set! (.-prev pr) pr)\n                          (set! (.-next pr) pr) nil)))))))\n            (if (pos? par)\n              (do (set! (.-busy c) false) (branch c))\n              (if (neg? par)\n                (if (identical? c (.-choice b))\n                  (if (nil? curr)\n                    (do (set! (.-busy c) false) (choose c))\n                    (do (set! (.-done c) true) (walk (.-next ^Branch curr)) nil))\n                  (do (set! (.-done c) true) (cancel (.-next c)) nil))\n                (do (set! (.-done c) true) nil)))))))))\n\n(defn suspend [^Branch b par flow]\n  (let [c (.-choice b)]\n    (set! (.-parallelism c) par)\n    (set! (.-iterator c)\n      (flow\n        (fn\n          ([]\n           (when-some [cb (ready c)] (cb)))\n          ([x]\n           (set! (.-current (.-branch c)) x)\n           (when-some [cb (ready c)] (cb))))\n        (fn\n          ([]\n           (set! (.-done c) true)\n           (when-some [cb (ready c)] (cb)))\n          ([x]\n           (set! (.-done c) true)\n           (set! (.-current (.-branch c)) x)\n           (when-some [cb (ready c)] (cb))))))\n    (when-not (.-live c)\n      ((.-iterator c))) b))\n\n(defn resume [^Branch b]\n  (let [c (.-choice b)\n        x (.-current b)]\n    (set! (.-current b) nil)\n    (when (.-done c)\n      (set! (.-done c) false)\n      (throw x)) x))\n\n(defn run [cr n t]\n  (let [ps (->Process n t nil nil nil)\n        b (->Branch ps nil nil nil nil nil)\n        c (->Choice b nil nil nil nop nil true false false)]\n    (->> b\n      (set! (.-prev b))\n      (set! (.-next b))\n      (set! (.-child ps)))\n    (->> c\n      (set! (.-prev c))\n      (set! (.-next c))\n      (set! (.-choice b)))\n    (when-some [cb (boot cr c)] (cb)) ps))"]}