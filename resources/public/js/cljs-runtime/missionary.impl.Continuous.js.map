{"version":3,"sources":["missionary/impl/Continuous.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__39847","js/Error","args39845","cljs.core/aclone","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Continuous/Process","missionary.impl.Continuous/->Process","notifier","terminator","value","choice","dirty","live","pending","this","missionary.impl.Continuous/kill","missionary.impl.Continuous/transfer","_","flow","missionary.impl.Continuous/suspend","js/missionary.Cancelled","missionary.impl.Continuous/push","missionary.impl.Continuous/Choice","missionary.impl.Continuous/->Choice","process","prev","next","child","sibling","backtrack","iterator","busy","done","rank","G__39886","args39884","missionary.impl.Continuous/Flow","missionary.impl.Continuous/->Flow","cr","n","t","missionary.impl.Continuous/top","ch","fexpr__39944","missionary.impl.Continuous/detach","ps","p","missionary.impl.Continuous/link","x","y","missionary.impl.Continuous/prune","c","fexpr__39950","missionary.impl.Continuous/step","f","missionary.impl.Fiber/fiber","r","e39952","cljs.core/identity","e","temp__5808__auto__","fexpr__39953","missionary.impl.Continuous/pull","bt","e39961","cljs.core/deref","cljs.core._EQ_","missionary.impl.Continuous/dequeue","head","heap","missionary.impl.Continuous/ready","cljs.core/not","e40000","temp__5806__auto__","d","G__40022","G__40023","cb","fexpr__40062","e40076","fexpr__40079","e40094","fexpr__40093","missionary.impl.Continuous/flow"],"sourcesContent":["(ns ^:no-doc missionary.impl.Continuous\n  (:require [missionary.impl.Fiber :refer [Fiber fiber]])\n  (:import missionary.Cancelled))\n\n(declare kill transfer suspend push)\n\n(deftype Process\n  [notifier terminator value choice dirty ^boolean live ^number pending]\n  IFn\n  (-invoke [this] (kill this) nil)\n  IDeref\n  (-deref [this] (transfer this))\n  Fiber\n  (park [_ _] (throw (js/Error. \"Unsupported operation.\")))\n  (fork [_ _ _] (throw (js/Error. \"Unsupported operation.\")))\n  (swich [this flow] (suspend this flow))\n  (check [_] (when-not live (throw (Cancelled. \"Process cancelled.\"))))\n  (unpark [_] (push choice)))\n\n(deftype Choice\n  [^Process process prev next child sibling backtrack iterator value ^boolean busy ^boolean done ^number rank])\n\n(deftype Flow [cr]\n  IFn\n  (-invoke [_ n t]\n    (n) (->Process n t cr nil nil true 0)))\n\n(defn top [^Choice ch]\n  (when-not (.-live (.-process ch))\n    ((.-iterator ch))))\n\n(defn detach [^Choice ch]\n  (let [ps (.-process ch)\n        p (.-prev ch)]\n    (set! (.-prev ch) nil)\n    (if (identical? ch p)\n      (set! (.-choice ps) nil)\n      (let [n (.-next ch)]\n        (set! (.-prev n) p)\n        (set! (.-next p) n)\n        (if (identical? ch (.-choice ps))\n          (set! (.-choice ps) p)\n          (when (identical? p (.-choice ps))\n            (top n)))))\n    (set! (.-next ch) nil)))\n\n(defn link [^Choice x ^Choice y]\n  (if (< (.-rank x) (.-rank y))\n    (do (set! (.-sibling y) (.-child x))\n        (set! (.-child x) y) x)\n    (do (set! (.-sibling x) (.-child y))\n        (set! (.-child y) x) y)))\n\n(defn prune [^Choice ch]\n  (let [ps (.-process ch)]\n    (loop []\n      (let [c (.-choice ps)]\n        (when-not (identical? c ch)\n          (let [p (.-prev c)\n                n (.-next c)]\n            (set! (.-prev c) nil)\n            (set! (.-next c) nil)\n            (set! (.-next p) n)\n            (set! (.-prev n) p)\n            (set! (.-choice ps) p)\n            ((.-iterator c))\n            (recur)))))))\n\n(defn step [^Process ps cr]\n  (let [f fiber]\n    (set! fiber ps)\n    (let [r (try (loop [cr cr]\n                   (let [cr (cr identity)\n                         r (cr)]\n                     (if (identical? r ps)\n                       (recur (set! (.-backtrack (.-choice ps)) cr)) r)))\n                 (catch :default e\n                   (when-some [ch (.-choice ps)]\n                     (let [ch (.-next ch)]\n                       (prune ch)\n                       (set! (.-prev ch) nil)\n                       (set! (.-next ch) nil)\n                       (set! (.-choice ps) nil)\n                       ((.-iterator ch))))\n                   (set! (.-notifier ps) nil) e))]\n      (set! fiber f) r)))\n\n(defn pull [^Choice ch x]\n  (let [ps (.-process ch)\n        bt (.-backtrack ch)]\n    (try\n      (loop []\n        (let [r @(.-iterator ch)]\n          (if (.-busy ch)\n            (if (= (.-value ch) (set! (.-value ch) r))\n              (do (set! (.-busy ch) false) x)\n              (do (prune ch) (step ps bt)))\n            (if (.-done ch)\n              (if (= (.-value ch) (set! (.-value ch) r))\n                (do (set! (.-pending ps) (dec (.-pending ps)))\n                    (detach ch) x)\n                (do (prune ch) (step ps bt)))\n              (do (set! (.-busy ch) true) (recur))))))\n      (catch :default e\n        (set! (.-iterator ch) nil)\n        (set! (.-value ch) e)\n        (prune ch)\n        (step ps bt)))))\n\n(defn dequeue [^Choice c]\n  (let [head (.-child c)]\n    (set! (.-child c) nil)\n    (loop [heap nil\n           prev nil\n           head head]\n      (if (nil? head)\n        (if (nil? prev) heap (if (nil? heap) prev (link heap prev)))\n        (let [next (.-sibling head)]\n          (set! (.-sibling head) nil)\n          (if (nil? prev)\n            (recur heap head next)\n            (let [head (link prev head)]\n              (recur (if (nil? heap) head (link heap head)) nil next))))))))\n\n(defn ready [^Choice ch]\n  (let [ps (.-process ch)]\n    (loop []\n      (when (set! (.-busy ch) (not (.-busy ch)))\n        (if (.-done ch)\n          (do (when-not (nil? (.-prev ch)) (detach ch))\n              (when (zero? (set! (.-pending ps) (dec (.-pending ps))))\n                (when-not (identical? ps (.-value ps)) (.-terminator ps))))\n          (if (nil? (.-prev ch))\n            (do (try @(.-iterator ch) (catch :default _)) (recur))\n            (if-some [d (.-dirty ps)]\n              (do (set! (.-dirty ps) (link d ch)) nil)\n              (do (set! (.-dirty ps) ch)\n                  (when-not (identical? ps (.-value ps))\n                    (.-notifier ps))))))))))\n\n(defn suspend [ps f]\n  (let [ch (->Choice ps nil nil nil nil nil nil ps true false 0)]\n    (set! (.-iterator ch)\n      (f #(when-some [cb (ready ch)] (cb))\n        #(do (set! (.-done ch) true)\n             (when-some [cb (ready ch)] (cb)))))\n    (if-some [p (.-choice ps)]\n      (let [n (.-next p)]\n        (set! (.-prev ch) p)\n        (set! (.-next ch) n)\n        (set! (.-next p) ch)\n        (set! (.-prev n) ch)\n        (set! (.-rank ch)\n          (inc (.-rank p))))\n      (do (set! (.-prev ch) ch)\n          (set! (.-next ch) ch)\n          (top ch)))\n    (set! (.-choice ps) ch)\n    (set! (.-pending ps)\n      (inc (.-pending ps))) ps))\n\n(defn kill [^Process ps]\n  (when (.-live ps)\n    (set! (.-live ps) false)\n    (when-some [ch (.-choice ps)]\n      ((.-iterator (.-next ch))))))\n\n(defn push [^Choice ch]\n  (let [ps (.-process ch)\n        x (.-value ch)]\n    (if (identical? x ps)\n      (if (set! (.-busy ch) (not (.-busy ch)))\n        (if (.-done ch)\n          (do (set! (.-pending ps) (dec (.-pending ps))) (detach ch)\n              (throw (js/Error. \"Undefined continuous flow.\")))\n          (try\n            (set! (.-value ch)\n              (loop []\n                (let [x @(.-iterator ch)]\n                  (if (.-busy ch)\n                    (do (set! (.-busy ch) false) x)\n                    (if (.-done ch)\n                      (do (set! (.-pending ps) (dec (.-pending ps)))\n                          (detach ch) x)\n                      (do (set! (.-busy ch) true)\n                          (recur)))))))\n            (catch :default e\n              (if (.-done ch)\n                (do (set! (.-pending ps) (dec (.-pending ps)))\n                    (detach ch)) (set! (.-busy ch) false))\n              (throw e))))\n        (do (detach ch) ((.-iterator ch))\n            (throw (js/Error. \"Undefined continuous flow.\"))))\n      (do (if (.-done ch)\n            (do (set! (.-pending ps) (dec (.-pending ps)))\n                (detach ch)) (set! (.-busy ch) false))\n          (if (nil? (.-iterator ch)) (throw x) x)))))\n\n(defn transfer [^Process ps]\n  (let [x (.-value ps)]\n    (set! (.-value ps) ps)\n    (loop [x (if-some [d (.-dirty ps)]\n               (do (set! (.-dirty ps) (dequeue d))\n                   (pull d x))\n               (step ps x))]\n      (if-some [d (.-dirty ps)]\n        (do (set! (.-dirty ps) (dequeue d))\n            (recur (if (nil? (.-prev d))\n                     (do (try @(.-iterator d)\n                              (catch :default _))\n                         (ready d) x)\n                     (pull d x))))\n        (do (set! (.-value ps) x)\n            (when (zero? (.-pending ps))\n              ((.-terminator ps)))\n            (if (nil? (.-notifier ps))\n              (throw x) x))))))\n\n(def flow ->Flow)"]}