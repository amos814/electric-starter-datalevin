{"version":3,"sources":["cljs/math.cljs"],"mappings":";AAIA;;;;AAKiBA,cAAEC;AAEnB;;;;AAKiBC,eAAGC;AAEpB;;;+BAAA,/BAIiBC;AAEjB;;;+BAAA,/BAIiBC;AAEjB,0BAAA,1BAAkCC;AAElC,gCAAA,hCAAkCC;AAElC,qBAAA,rBAAkCC;AAElC,0BAAA,1BAAkCC;AAElC,AAAkCC,oBAAQF,AAAA;AAE1C,oBAAA,pBAAkCG;AAMlC;;;8BAAA,9BAAOC;AAAP,AAGE,IAAMC,IAAE,KAAAC,YAAA;IACFC,IAAE,KAAAC,YAAiBH;IACnBI,IAAE,KAAAC,WAAgBL;AAFxB,AAGE,GAAA,OAAA,TAAME;;AACN,qBAAA,bAAO,GAAA,FAAME;;AAEjB,GAAA,QAAAE,iCAAAC,sCAAAC;AAAA;AAAA,AAAA,AAAmBC,iCAAe,AAACV;;AAGnC;;;AAAoEW,eAAG,kCAAA,IAAA,pCAAID;AAE3E;;;AAAoEE,eAAG,CAAA,MAAKD;AAE5E,uBAAA,vBAAkCE;AAElC,+BAAA,/BAAkCC;AAElC,gCAAA,hCAAkCC;AAElC;;;kBAAA,lBAAMC,4CAGHf,EAAEI;AAHL,AAKE,IAAMY,KAAG,OAAA,NAA0BhB;IAC7BiB,KAAG,OAAA,NAA0Bb;AADnC,AAEE,SAAI,CAAGY,KAAGC,SACN,EAAK,CAAID,OAAGC,SACP,CAAG,KAAA,JAASjB,mBAAc,KAAA,JAASI;;AAEhD;;;;;;gBAAA,hBAAcc,wCAMXlB;AANH,AAMM,OAACmB,SAASnB;;AAEhB;;;;;gBAAA,hBAAcoB,wCAKXpB;AALH,AAKM,OAACqB,SAASrB;;AAEhB;;;;;;gBAAA,hBAAcsB,wCAMXtB;AANH,AAMM,OAACuB,SAASvB;;AAEhB;;;;;;iBAAA,jBAAcwB,0CAMXxB;AANH,AAMM,OAACyB,UAAUzB;;AAEjB;;;;;iBAAA,jBAAc0B,0CAKX1B;AALH,AAKM,OAAC2B,UAAU3B;;AAEjB;;;;;;iBAAA,jBAAc4B,0CAMX5B;AANH,AAMM,OAAC6B,UAAU7B;;AAEjB;;;;uBAAA,vBAAc8B,sDAIXC;AAJH,AAKE,QAAGA,MAAIxC,AAAA;;AAET;;;;uBAAA,vBAAcyC,sDAIXC;AAJH,AAKE,QAAGA,IAAEzC,AAAA;;AAEP;;;;;;;gBAAA,hBAAc0C,wCAOXlC;AAPH,AAOM,OAACmC,SAASnC;;AAEhB;;;;;;;gBAAA,hBAAcoC,wCAOXpC;AAPH,AAOM,OAACqC,SAASrC;;AAEhB;;;;;;;kBAAA,lBAAcsC,4CAOXtC;AAPH,AAOM,OAACuC,WAAWvC;;AAElB;;;;;;;iBAAA,jBAAcwC,0CAOXxC;AAPH,AAOM,OAACyC,UAAUzC;;AAEjB;;;;;;;iBAAA,jBAAc0C,0CAOX1C;AAPH,AAOM,OAAC2C,UAAU3C;;AAEjB;;;;iBAAA,jBAAc4C,0CAKXC;AALH,AAOE,IAAM7C,IAAE,KAAAC,YAAA;IAEF6C,IAAE,KAAAC,aAAkB/C;IAEpBE,IAAE,KAAAC,YAAiBH;IACnBgD,KAAG,kCAAA,IAAA,pCAAIvC;AALb,AAOE,GAAA,FAAMqC,SAAID;;AAEV,CAAM3C,EAAE8C,MAAG,CAAS,CAAM9C,EAAE8C,OAAIlC,AAAA;;AAEhC,UAAA,FAAMgC;;AAEV,AAAsBG,iBAEpB,iBAAMjD,IAAE,KAAAC,YAAA;IAEF6C,IAAE,KAAAC,aAAkB/C;IAEpBI,IAAE,KAAAC,WAAgBL;AAJxB,AAME,GAAA,OAAA,TAAM8C;;AACN,GAAA,OAAA,TAAMA;;AAEN,kDAAA,jDAAM1C,EAAE,kCAAA,KAAA,rCAAIK;;AAEZqC;;AAEJ,iBAAA,jBAAkCI;AAClC,iBAAA,jBAAkCC;AAClC,AAAsBC,iBAAK,CAAG,CAAA,MAAKF,AAAA,OAAMxC;AACzC,AAAsB2C,iBAAK,CAAG,CAAA,MAAKH,AAAA,OAAMvC;AACzC,AAAsB2C,iBAAK,CAAG,CAAA,MAAKH,AAAA,OAAMzC;AACzC,AAAsB6C,iBAAK,CAAG,CAAA,MAAKJ,AAAA,OAAMxC;AAEzC;;;kBAAA,lBAAc6C,4CAGXC,GAAGC;AAHN,AAIE,GAAI,MAAA,LAAGD;AACL,IAAME,iBAAS,QAAA,PAAOF;IAChBG,WAAS,kBAAA,QAAA,xBAAID;IACbE,UAAQ,EAAIF,gBAASD,GAAG,OAAA,NAAgBD;AAF9C,AAGE,IAAOK,KAAGF;IAAS1D,IAAE2D;;AAArB,AACE,GAAA,GAAQ,KAAA,JAAG3D;AACT4D;;AACA,eAAO,MAAA,LAAKA;eAAI,MAAA,LAAgB5D;;;;;;;;AACtC,uBAAA,fAAG,OAAA,NAAiBuD;;;AAExB;;;qBAAA,rBAAcM,kDAGX7D,EAAE8D,EAAEC;AAHP,AAIE,GAAI,MAAA,LAAI/D;AAAR,0FACG,CAAA,YAAmB,CAAA,YAAoB8D,IAAIC;;AAC5C,IAAMC,IAAE,CAAA,UAAShE;AAAjB,AACE,GAAI,MAAA,LAAIgE;AAAR,0FACG,CAAQ,CAAgBF,KAAEE,KAAG,CAA0BD,MAAE,CAAA,OAAMC,KAAK,CAAgBD,KAAEC;;AADzF,4GAAA,lBAEG,CAAgBD,KAAE,KAAA,JAAGC;;;;AAE9B;;;;;;;sBAAA,tBAAcC,oDAOXtB,EAAEuB;AAPL,AASE,GAAI,mBAAA,jBAAI,OAAA,NAAOA,kBAAG,AAAUC,MAASD,QAAG,GAAK,AAAUE,SAAYzB;AAAnE;;AAIE,IAAM7C,IAAE,KAAAC,YAAA;IAEF6C,IAAE,KAAAC,aAAkB/C;IAEpBE,IAAE,KAAAC,YAAiBH;IAEnBuE,IAAE,CAAMzB,EAAEI,AAAA,OAAKL;IACf0B,QAAE,CAAMzB,EAAEK,AAAA,OAAKiB;IACfX,KAAG,CAAMvD,EAAEkD;IACXM,KAAG,CAAMxD,EAAEmD;IACXmB,KAAG,CAAMtE,EAAEoD;IACXmB,KAAG,CAAMvE,EAAEqD;IACXmB,KAAG,CAASjB,KAAG5C,AAAA;IACf4C,SAAG,CAASA,KAAG3C,AAAA;IACf0D,SAAG,CAASA,KAAG1D,AAAA;IACf6D,eAAO,CAAIlB,UAAGe;AAfpB,AAgBE,GAEE,EAAKG,kBAAO,EAAI,CAAGlB,SAAGe,aAAI,CAAGd,KAAGe;AAAM5B;;AAFxC,GAGE,EAAK8B,kBAAO,CAAIjB,OAAGe;AAAK,QAAMxB,eAAK,QAAA,PAA0ByB;;AAH/D,AAOE,IAAA,AACE,IAAMZ,KAAG,AAACN,gBAAMC,OAAGC;IACbyB,KAAG,AAAC3B,gBAAMgB,OAAGC;IADnBI,aAGc,AAACd,mBAASD,GAAGL,OAAGC;aAH9B,AAAAoB,4CAAAD,WAAA,IAAA,pEAGOpB;aAHP,AAAAqB,4CAAAD,WAAA,IAAA,pEAGUnB;IAHVqB,aAIc,AAAChB,mBAASoB,GAAGX,OAAGC;aAJ9B,AAAAK,4CAAAC,WAAA,IAAA,pEAIOP;aAJP,AAAAM,4CAAAC,WAAA,IAAA,pEAIUN;IAJVO,aAMc,iBAAOd,IAAE,CAAGJ,KAAGqB;IAAI1B,SAAGA;IAAGC,SAAGA;;AAA5B,AACE,GAAI,OAAA,NAAOQ;AAAX,0FACGT,OAAGC;;AACJ,IAAM2B,KAAG,EAAI,AAACtE,gBAAG2C,OAAGe,SAAI,CAAA,oBAAA,nBAAGhB,SAAGe,eAAM,CAAGf,SAAGe;IACpCc,KAAG,CAAG5B,SAAGe;IADfW,aAEc,cAAA,ZAAI,MAAA,LAAGC,8FACJ,CAAA,CAAG5B,SAAGA,UAAG,YAAA,XAA0BC,kBAAQ,CAAGA,SAAGA,gBAClD,yNAAA,vNAAI,eAAA,dAAO,CAAQ2B,KAAGC,cACpB,kBAAO,gDAAA,cAAA,2CAAA,qDAAA,9JAACC,mQACP,CAAA,CAAGF,KAAGA,MAAG,QAAA,PAA0BC,cAAQ,CAAGA,KAAGA;aANpE,AAAAR,4CAAAM,WAAA,IAAA,pEAEO3B;aAFP,AAAAqB,4CAAAM,WAAA,IAAA,pEAEU1B;AAFV,AAOE,eAAO,KAAA,JAAKQ;eAAG,CAAStD,AAAA,eAAW6C;eAAI,CAAS7C,AAAA,eAAW8C;;;;;;;;;aAhB/E,AAAAoB,4CAAAE,WAAA,IAAA,pEAMOvB;aANP,AAAAqB,4CAAAE,WAAA,IAAA,pEAMUtB;IAWJ2B,KAAG,EAAI,AAACtE,gBAAG2C,OAAGe,SAAI,CAAA,oBAAA,nBAAGhB,SAAGe,eAAM,CAAGf,SAAGe;IACpCc,KAAG,CAAG5B,SAAGe;IAlBfQ,aAmBc,eAAA,iGAAA,9GAAI,OAAA,NAAII,+FAAOA,GAAGC,8FAAK7B,OAAGC;aAnBxC,AAAAoB,4CAAAG,WAAA,IAAA,pEAmBOxB;aAnBP,AAAAqB,4CAAAG,WAAA,IAAA,pEAmBUvB;IAEJa,QAAE,+BAAA,kMAAA,/NAAM,uBAAA,tBAAO,CAAQd,SAAGC,kBACtB,kBAAO,gDAAA,cAAA,2CAAA,qDAAA,9JAAC6B;IAtBlBL,aAwBiB,iBAAOzB,SAAGA;IAAGC,SAAGA;IAAGyB,SAAGA;;AAAtB,AACE,GAAA,GAAQ,UAAA,TAAG1B;AAAX,0FACGA,OAAGC,OAAGyB;;AACP,eAAO,CAAA,CAAG1B,SAAGA,UAAG,YAAA,XAA0BC;eAAQ,CAAGA,SAAGA;eAAI,UAAA,TAAKyB;;;;;;;;;aA3BtF,AAAAL,4CAAAI,WAAA,IAAA,pEAwBOzB;aAxBP,AAAAqB,4CAAAI,WAAA,IAAA,pEAwBUxB;aAxBV,AAAAoB,4CAAAI,WAAA,IAAA,pEAwBaC;AAxBb,AA6BE,GAAI,WAAA,VAAIA;AACN,IAAM1B,SAAG,CAAQ,UAAA,TAAGA,sBAAe,sBAAA,rBAAgB,UAAA,TAAG0B;AAAtD,AACE,CAAMjF,EAAEkD,kBAAK,CAAQK,SAAGiB;;AACxB,CAAMxE,EAAEmD,kBAAKK;;AACb,QAAMZ,EAAEI,AAAA;;AACV,IAAMgB,IAAE,CAAA,UAASiB;IAAjBK,aACc,eAAA,mJAAA,eAAA,wIAAA,AAAA,vTACE,MAAA,LAAItB,+FAAO,CAAiBT,UAAGS,GACpB,CAAQ,CAA0BR,WAAGQ,KAAG,CAAgBT,UAAG,CAAA,OAAMS,eAC5E,MAAA,LAAIA,+FAAOQ,GACA,CAAQ,CAAgBjB,UAAG,CAAA,OAAMS,MAAI,CAA0BR,WAAGQ,+FACnEQ,GAAG,CAAiBjB,UAAG,KAAA,JAAGS;;aANpD,AAAAY,4CAAAU,WAAA,IAAA,pEACO/B;aADP,AAAAqB,4CAAAU,WAAA,IAAA,pEACU9B;AADV,AAOE,CAAMxD,EAAEkD,kBAAK,CAAQK,SAAGiB;;AACxB,CAAMxE,EAAEmD,kBAAKK;;AACb,mBAAA,XAAG,CAAMZ,EAAEI,AAAA;;gBA5CnB,YAAA0B,RA6CkBL;AA7ClB,AA6CoB,QAAMtB,eAAK,QAAA,PAA0ByB;;;;;;AAEjE;;;;;;;;;;;;;2BAAA,3BAAce,8DAaXC,SAASC;AAbZ,AAeE,GACE,aAAA,ZAAOA;AADT;;AAAA,GAEE,AAAUtB,MAASsB;AAFrB;;AAAA,GAIE,AAAUtB,MAASqB;AAJrB;;AAAA,GAKE,GAAK,AAAUpB,SAAYoB;AAL7B;;AAAA,GAOE,GAAK,AAAUpB,SAAYqB;AAAUD;;AAPvC,AAWE,IAAM1F,IAAE,KAAAC,YAAA;IAEF6C,IAAE,KAAAC,aAAkB/C;IAEpBE,IAAE,KAAAC,YAAiBH;AAJzB,AAKE,GAAA,FAAM8C,SAAI4C;;AACV,GAAA,FAAM5C,SAAI6C;;AAEV,IAAMlC,KAAG,CAAMvD,EAAEQ;IACXgD,KAAG,CAAMxD,EAAES;IAEXiF,KAAG,CAAM1F,EAAE,gBAAA,fAAGQ;IACdmF,KAAG,CAAM3F,EAAE,gBAAA,fAAGS;IAEd+D,KAAG,CAASjB,KAAG5C,AAAA;IAEf+E,SAAG,CAASA,KAAG9E,AAAA;IACf2C,SAAG,CAASA,KAAG3C,AAAA;IAGf4E,eAAS,EAAI,WAAA,VAAIE,yBAAe,AAACzB,oBAAUuB,SAAS,CAAGC,UAAQA,UAAUD;AAZ/E,AAaE,GAAI,qCAAA,pCAAO,CAAQ,CAAGjC,SAAGmC,UAAI,CAAGlC,KAAGmC;AACjC,QAAA,MAAOH;;AAEP,IAAMA,eAAS,AAACI,SAASJ;IACnBC,cAAQ,AAACG,SAASH;IAElBD,eAAS,EAAI,UAAA,TAAGE,qBAEL,EAAI,CAAG,CAAGF,eAASA,gBAAUC,cAC3B,iBAAMD,eAAS,CAAGA,eAASC;AAA3B,AACE,GAAI,CAAI,CAAGD,eAASA,iBAAUC;AAC5B,QAAGD,eAASC;;AACZD;;KACJA,cAEF,iBAAMK,eAAa,CAAA,MAAOJ;AAA1B,AACE,GAAI,CAAGD,eAASK;AACd,IAAML,eAAS,CAAGA,eAASC;AAA3B,AACE,GAAI,CAAID,gBAASK;AACf,QAAGL,eAASC;;AACZD;;;AACJA;;;AAlBrB,AAoBE,GAAA,FAAM5C,SAAI4C;;AAEV,IAAMjC,SAAG,CAAS,CAAMvD,EAAEQ,iBAAIgE;AAA9B,AAEE,CAAMxE,EAAEQ,gBAAG+C;;AAEX,UAAA,FAAMX;;;;;;;;;AAEpB;;;;;;;iBAAA,jBAAckD,0CAOXhG;AAPH,AAQE,GAAI,GAAA,MAAA,LAAOA;AACT,OAACiG,UAAUjG;;AACX,MAAO,gDAAA,iCAAA,2CAAA,kDAAA,9KAACuF;;;AAEZ;;;;;;;;kBAAA,lBAAcW,4CAQXlG;AARH,AASE,GAAI,GAAA,MAAA,LAAOA;AACT,OAACmG,WAAWnG;;AACZ,MAAO,gDAAA,kCAAA,2CAAA,kDAAA,/KAACuF;;;AAEZ;;;;;sBAAA,tBAAca,oDAKXC,UAAUC;AALb,AAOE,IAAMtG,IAAE,KAAAC,YAAA;IAEF6C,IAAE,KAAAC,aAAkB/C;IAEpBI,IAAE,KAAAC,WAAgBL;IAElBuG,QAAM,kCAAA,IAAA,pCAAI9F;AANhB,AAQE,GAAA,FAAMqC,SAAIuD;;AACV,GAAA,FAAMvD,SAAIwD;;AAEV,IAAME,aAAW,CAAA,QAAc,CAAMpG,EAAE,CAAA,MAAKmG;IAEtCE,YAAU,CAAA,QAAc,CAAMrG,EAAEmG;AAFtC,AAKE,CAAMnG,EAAEmG,SAAM,CAAQC,aAAWC;;AAEjC,UAAA,FAAM3D;;AAEZ;;;;;;iBAAA,jBAAc4D,0CAMX1G;AANH,AAOE,IAAMsG,OAAK,oBAAA,pBAACF,wBAAepG;IACrBA,QAAE,AAAC8F,SAAS9F;IACZA,QAAE,EAAI,CAAGA,QAAEP,AAAA,qBACP,CAAG,CAAGA,AAAA,qBAAcO,SAAGP,AAAA,oBAAeO;AAHhD,AAIE,QAAGsG,OAAKtG;;AAEZ;;;;;;kBAAA,lBAAc2G,4CAMXvC,EAAEvB;AANL,AAMQ,OAAC+D,WAAWxC,EAAEvB;;AAEtB;;;;;gBAAA,hBAAcgE,wCAKX7G,EAAEI;AALL,AAKQ,OAAC0G,SAAS9G,EAAEI;;AAEpB;;;;;;;;kBAAA,lBAAc2G,4CAQX/G;AARH,AASE,GACE,AAAUqE,MAASrE;AADrB;;AAAA,GAEE,AAAUsE,SAAYtE;AAAG,OAACgH,WAAWhH;;AAFvC,GAGE,CAAA,aAAUA;AAAGiH;;AAHf,AAIWC;;;;;;AAEb;;;;;;mBAAA,nBAAcC;AAAd,AAMK,OAACC;;AAEN;;;sBAAA,tBAAcC,oDAGXxE,EAAEuB;AAHL,AAIE,IAAMnC,IAAE,CAAgBY,IAAEuB;AAA1B,AACE,GAAI,EAAI,CAAGnC,IAAEgF,8BAA4B,CAAGhF,IAAEiF;AAC5C,MAAO,gDAAA,mBAAA,2CAAA,kDAAA,hKAAC3B;;AACRtD;;;AAEN;;;2BAAA,3BAAcqF,8DAGXzE,EAAEuB;AAHL,AAIE,IAAMnC,IAAE,CAAGY,IAAEuB;AAAb,AACE,GAAI,EAAI,CAAGnC,IAAEgF,8BAA4B,CAAGhF,IAAEiF;AAC5C,MAAO,gDAAA,mBAAA,2CAAA,kDAAA,hKAAC3B;;AACRtD;;;AAEN;;;2BAAA,3BAAcsF,8DAGX1E,EAAEuB;AAHL,AAIE,IAAMnC,IAAE,CAAGY,IAAEuB;AAAb,AACE,GAAI,EAAI,CAAGnC,IAAEgF,8BAA4B,CAAGhF,IAAEiF;AAC5C,MAAO,gDAAA,mBAAA,2CAAA,kDAAA,hKAAC3B;;AACRtD;;;AAEN;;;4BAAA,5BAAcuF,gEAGXxH;AAHH,AAIE,GAAI,EAAI,CAAIA,KAAEiH,8BAA4B,CAAGjH,IAAEkH;AAC7C,MAAO,gDAAA,mBAAA,2CAAA,kDAAA,hKAAC3B;;AACR,YAAA,JAAKvF;;;AAET;;;4BAAA,5BAAcyH,gEAGXzH;AAHH,AAIE,GAAI,EAAI,CAAIA,KAAEkH,8BAA4B,CAAGlH,IAAEiH;AAC7C,MAAO,gDAAA,mBAAA,2CAAA,kDAAA,hKAAC1B;;AACR,YAAA,JAAKvF;;;AAET;;;yBAAA,zBAAc0H,0DAGX1H;AAHH,AAIE,GAAI,EAAI,CAAGA,IAAEiH,8BAA4B,CAAGjH,IAAEkH;AAC5C,MAAO,gDAAA,mBAAA,2CAAA,kDAAA,hKAAC3B;;AACR,UAAGvF;;;AAEP,gBAAA,hBAAO2H,wCACK3H,EAAWI;AADvB,AAEE,SAAI,EAAKJ,OAAE,GAAKI,WAAI,EAAK,GAAKJ,SAAGI;;AAEnC;;;;sBAAA,tBAAcwH,oDAIX/E,EAAEuB;AAJL,AAKE,GAAA,GAAQ,EAAK,AAAUyD,qBAAwBhF,QAAG,AAAUgF,qBAAwBzD;AAClF,MAAO,gDAAA,mDAAA,2CAAA,gFAAA,9NAACmB,sMACiB,AAACsC,qBAAwBhF,4DAAW,AAACgF,qBAAwBzD;;AACtF,IAAMnC,IAAE,AAAC6F,gBAAK,CAAGjF,IAAEuB;AAAnB,AACE,GAAI,EAAK,AAACuD,cAAI,KAAA,JAAG9E,SAAK,KAAA,JAAGuB,eAAM,GAAK,CAAI,CAAGnC,IAAEmC,OAAGvB;AAC9C,YAAA,JAAKZ;;AACLA;;;;AAER;;;;;sBAAA,tBAAc8F,oDAKXlF,EAAEuB;AALL,AAME,GAAA,GAAQ,EAAK,AAAUyD,qBAAwBhF,QAAG,AAAUgF,qBAAwBzD;AAClF,MAAO,gDAAA,mDAAA,2CAAA,gFAAA,9NAACmB,sMACiB,AAACsC,qBAAwBhF,4DAAW,AAACgF,qBAAwBzD;;AAEtF,IAAMnC,IAAE,AAAC6F,gBAAK,CAAGjF,IAAEuB;AAAnB,AACE,GAAI,EAAK,AAACuD,cAAI,KAAA,JAAG9E,SAAK,KAAA,JAAGuB,eAAM,GAAK,CAAI,CAAGnC,IAAEmC,OAAGvB;AAC9C,QAAA,CAAGA,IAAE,CAAGuB,IAAEnC,MAAG,GAAGmC;;AAChB,QAAGvB,IAAE,CAAGuB,IAAEnC;;;;AAElB;;;;;;yBAAA,zBAAc+F,0DAMXlF;AANH,AAOE,GACE,EAAI,AAAUuB,MAASvB,QAAG,GAAK,AAAUwB,SAAYxB;AAAK,4BAAA,pBAAKjD;;AADjE,GAEE,OAAA,NAAOiD;AAAG,kBAAA,VAAKhD,AAAA;;AAFjB,AAGW,IAAME,IAAE,KAAAC,YAAA;IACFgI,IAAE,KAAAlF,aAAkB/C;IACpBE,IAAE,KAAAC,YAAiBH;IACnBgD,KAAG,kCAAA,IAAA,pCAAIvC;AAHb,AAIE,GAAA,FAAMwH,SAAInF;;AACV,QAAG,CAAiB,CAAS,CAAM5C,EAAE8C,OAAIpD,AAAA,iBAAe,QAAA,PAAKF,AAAA,eAAsBC,AAAA;;;;;AAElG;;;;6BAAA,7BAAcuI,kEAIXlE,EAAEC;AAJL,AAKE,IAAMjE,IAAE,KAAAC,YAAA;IACFgI,IAAE,KAAAlF,aAAkB/C;IACpBE,IAAE,KAAAC,YAAiBH;AAFzB,AAGE,CAAME,EAAES,gBAAGsD;;AACX,CAAM/D,EAAEQ,gBAAGsD;;AACX,UAAA,FAAMiE;;AAEV;;;yBAAA,zBAAcE,0DAGXjE;AAHH,AAIE,GAAQ,EAAK,CAAIA,KAAEpE,AAAA,cAAS,CAAIoE,KAAErE;AAAlC;AAAA,AAAA,MAAA,KAAAuI,MAAA;;;AACA,kFAAA,3EAACF,2BACA,CAAS,CAAgB,CAAGhE,IAAEvE,AAAA,WAAU,QAAA,PAAKD,AAAA,eAAsBE,AAAA;;AAEtE;;;;;;;;gBAAA,hBAAcyI,wCAQXvF;AARH,AASE,GACE,AAAUuB,MAASvB;AAAGA;;AADxB,GAEE,AAAUwB,SAAYxB;AACtB,IAAMwF,IAAE,AAACN,uBAAalF;AAAtB,AACE,IAAAyF,WAAMD;AAAN,AAAA,QAAAC;KAAA;AACO,OAACzC,SAAShD;;;KADjB;AAEQ0F;;;;AACN,IAAMF,QAAE,CAAGA,IAAE,CAAA,OAAM5I,AAAA;AAAnB,AACE,GAAI,CAAI4I,SAAExI,AAAA;AACR,OAACqI,uBAAaG;;AACd,IAAMG,QAAM,CAAGH,QAAE,CAAA,WAAA,VAAGxI,AAAA,kBAAWJ,AAAA;AAA/B,AACE,GAAI,SAAA,RAAG+I;AACL,kCAAA,3BAACP,+BAAgB,CAAA,OAAkBO;;AACnC,0DAAA,nDAACP,2BAAc,CAAA,OAAkB,SAAA,RAAGO;;;;;;AAblD,AAAA;;;;;AAgBF;;;;;;mBAAA,nBAAcC,8CAMX5F;AANH,AAOE,GAAI,EAAI,OAAA,NAAOA,gBAAG,AAAUuB,MAASvB;AACnCA;;AACA,2BAAA,pBAACsD,wBAActD;;;AAEnB;;;;;;iBAAA,jBAAc6F,0CAMX9F;AANH,AAMM,OAAC+F,UAAU/F;;AAEjB;;;;;;;iBAAA,jBAAcgG,0CAOXhG;AAPH,AAOM,OAACiG,UAAUjG;;AAEjB;;;;;;;;iBAAA,jBAAckG,0CAQXlG;AARH,AAQM,OAACmG,UAAUnG;;AAEjB;;;;;;kBAAA,lBAAcoG,4CAMXpG,EAAEuB;AANL,AAMQ,OAAC8E,WAAWrG,EAAEuB;;AAEtB;;;;;;;;kBAAA,lBAAc+E,4CAQXtG;AARH,AAQM,OAACuG,WAAWvG;;AAElB;;;;;;;;kBAAA,lBAAcwG,4CAQXxG;AARH,AAQM,OAACyG,WAAWzG;;AAElB;;;;kBAAA,lBAAc0G,4CAIX9F,GAAGC,GAAGc,GAAGC;AAJZ,AAKE,IAAMC,KAAG,yBAAA,xBAA0B,CAAShB,KAAG7C,AAAA;IACzC2I,KAAG,yBAAA,xBAA0B,CAAS/E,KAAG5D,AAAA;IACzC4I,KAAG,CAAG,CAAS3I,AAAA,eAAoB4C,MAAI,CAAS5C,AAAA,eAAoB2D;IACpEiF,MAAI,yBAAA,xBAA0B,CAASD,KAAG5I,AAAA;IAC1C8I,MAAI,CAAA,CAAGjF,KAAG8E,MAAGE;IACbD,SAAG,CAAQ,CAASA,KAAG3I,AAAA,gBAAqB,QAAA,PAAgB6I;IAC5DC,MAAI,QAAA,PAAiBD;IACrBE,KAAG,CAASjJ,AAAA,eAAW,CAAA,CAAG6C,KAAGe,MAAGoF;AAPtC,AAAA,0FAQGC,GAAGJ;;AAER;;;;;;;;;;;;;uBAAA,vBAAcK,sDAaXC,MAAMC;AAbT,AAgBE,IAAMhK,IAAE,KAAAC,YAAA;IACFgI,IAAE,KAAAlF,aAAkB/C;IACpBE,IAAE,KAAAC,YAAiBH;AAFzB,AAGE,GACE,CAAG+J,QAAMC;AAAW,GAAA,GAAQ,WAAA,VAAOD;AACb,IAAMxF,IAAE,GAAA,FAAM0D,SAAI8B;IACZG,KAAG,CAAMhK,EAAEQ;IACXyJ,KAAG,CAAMjK,EAAES;IAFjBsJ,aAKc,EAAI,yBAAA,xBAAO,CAASC,KAAGrJ,AAAA,wBACrB,sBAAA,aAAA,nCAAC0I,gBAAMW,GAAGC,8BACV,sBAAA,IAAA,1BAACZ,gBAAMW,GAAGC;SAP1B,AAAArF,4CAAAmF,WAAA,IAAA,hEAKOJ;SALP,AAAA/E,4CAAAmF,WAAA,IAAA,hEAKUR;AALV,AAQE,CAAMvJ,EAAEQ,gBAAGmJ;;AACX,CAAM3J,EAAES,gBAAG8I;;AACX,UAAA,FAAMxB;;AAER,UAAGO;;;AAd3B,GAiBE,CAAGuB,QAAMC;AAAW,IAAMzF,IAAE,GAAA,FAAM0D,SAAI,SAAA,RAAG8B;IACfG,KAAG,CAAMhK,EAAEQ;IACXyJ,KAAG,CAAMjK,EAAES;IAFjByJ,aAGc,EAAI,yBAAA,xBAAO,CAASF,KAAGrJ,AAAA,wBACrB,sBAAA,IAAA,1BAAC0I,gBAAMW,GAAGC,YACV,sBAAA,aAAA,nCAACZ,gBAAMW,GAAGC;SAL1B,AAAArF,4CAAAsF,WAAA,IAAA,hEAGOP;SAHP,AAAA/E,4CAAAsF,WAAA,IAAA,hEAGUX;AAHV,AAME,CAAMvJ,EAAEQ,gBAAGmJ;;AACX,CAAM3J,EAAES,gBAAG8I;;AACX,UAAA,FAAMxB;;AAzB9B,GA0BE,CAAI8B,UAAMC;AAAWA;;AA1BvB,AA2BW,QAAGD,QAAMC;;;;;;AAExB;;;;;;;oBAAA,pBAAcK,gDAOXvH;AAPH,AASE,GAAI,CAAGA,IAAEwH;AACP,IAAMtK,IAAE,KAAAC,YAAA;IACFgI,IAAE,KAAAlF,aAAkB/C;IACpBE,IAAE,KAAAC,YAAiBH;IAEnBuE,IAAE,GAAA,FAAM0D,SAAI,KAAA,JAAGnF;IACfoH,KAAG,CAAMhK,EAAEQ;IACXyJ,KAAG,CAAMjK,EAAES;IANjB4J,aAOc,EAAI,yBAAA,xBAAO,CAASL,KAAGrJ,AAAA,wBACrB,sBAAA,IAAA,1BAAC0I,gBAAMW,GAAGC,YACV,sBAAA,aAAA,nCAACZ,gBAAMW,GAAGC;SAT1B,AAAArF,4CAAAyF,WAAA,IAAA,hEAOOV;SAPP,AAAA/E,4CAAAyF,WAAA,IAAA,hEAOUd;AAPV,AAUE,CAAMvJ,EAAEQ,gBAAGmJ;;AACX,CAAM3J,EAAES,gBAAG8I;;AACX,UAAA,FAAMxB;;AAERnF;;;AAEJ;;;;;;;sBAAA,tBAAc0H,oDAOX1H;AAPH,AAQE,GACE,EAAI,AAAUuB,MAASvB,QAAG,CAAA,cAAWA;AAAIA;;AAD3C,GAEE,OAAA,NAAOA;AAAG,UAAG0F;;AAFf,AAIE,IAAMxI,IAAE,KAAAC,YAAA;IACFgI,IAAE,KAAAlF,aAAkB/C;IACpBE,IAAE,KAAAC,YAAiBH;IACnBuE,IAAE,GAAA,FAAM0D,SAAInF;IACZoH,KAAG,CAAMhK,EAAEQ;IACXyJ,KAAG,CAAMjK,EAAES;IALjB8J,aAMc,EAAI,KAAA,JAAG3H,UACL,sBAAA,aAAA,nCAACyG,gBAAMW,GAAGC,8BACV,sBAAA,IAAA,1BAACZ,gBAAMW,GAAGC;SAR1B,AAAArF,4CAAA2F,WAAA,IAAA,hEAMOZ;SANP,AAAA/E,4CAAA2F,WAAA,IAAA,hEAMUhB;AANV,AASE,CAAMvJ,EAAEQ,gBAAGmJ;;AACX,CAAM3J,EAAES,gBAAG8I;;AACX,UAAA,FAAMxB;;;;;AAEZ,AAAeyC,sBAAU,CAAA,CAAA,CAAA,4CAAA,QAAA,nDAAG7K,oBAAQ,GAAGC,AAAA,YAASJ,AAAA;AAEhD,AAAeiL,uCAA2B,uBAAA,vBAACxC;AAE3C,AAAeyC,yCAA6B,uBAAA,vBAACzC;AAE7C;;;;;;;;;kBAAA,lBAAc0C,4CASX/H,EAAEgI;AATL,AAUE,IAAAC,aAEkB,uBAAA,iIAAA,sDAAA,6HAAA,zUAAI,eAAA,dAAGD,uGACJ,AAACK,SAASL,YAAY,GAAGJ,6BAAiBE,kIAC1C,AAACQ,SAASN,YAAYJ,2BAAeC;mBAJ1D,AAAA7F,4CAAAiG,WAAA,IAAA,1EAAOC;sBAAP,AAAAlG,4CAAAiG,WAAA,IAAA,7EACOE;gBADP,AAAAnG,4CAAAiG,WAAA,IAAA,vEAEOG;IAKDG,IAAE,2BAAA,1BAA0B,iBAAA,hBAAiBL;IAC7CM,aAAW,CAAG,sBAAA,rBAAS,CAAGN,eAAaK,cAAQA;AARrD,AASE,IAAOvI,QAAE,CAAGA,IAAE,AAACqF,uBAAamD;IAAaN,mBAAa,CAAGA,eAAaM;;AAAtE,AACE,GAAI,sBAAA,rBAAON;AACTlI;;AACA,eAAO,CAAGA,QAAEoI;eAAW,CAAGF,mBAAaC","names":["cljs.math/E","Math/E","cljs.math/PI","Math/PI","cljs.math/DEGREES-TO-RADIANS","cljs.math/RADIANS-TO-DEGREES","cljs.math/TWO-TO-THE-52","cljs.math/SIGNIFICAND-WIDTH32","cljs.math/EXP-BIAS","cljs.math/EXP-BITMASK32","cljs.math/EXP-MAX","cljs.math/EXP-MIN","cljs.math/get-little-endian","a","js/ArrayBuffer","i","js/Uint32Array","b","js/Uint8Array","js/cljs","js/cljs.math","js/cljs.math.little-endian?","cljs.math/little-endian?","cljs.math/HI","cljs.math/LO","cljs.math/INT32-MASK","cljs.math/INT32-NON-SIGN-BIT","cljs.math/INT32-NON-SIGN-BITS","cljs.math/u<","ab","bb","cljs.math/sin","Math/sin","cljs.math/cos","Math/cos","cljs.math/tan","Math/tan","cljs.math/asin","Math/asin","cljs.math/acos","Math/acos","cljs.math/atan","Math/atan","cljs.math/to-radians","deg","cljs.math/to-degrees","r","cljs.math/exp","Math/exp","cljs.math/log","Math/log","cljs.math/log10","Math/log10","cljs.math/sqrt","Math/sqrt","cljs.math/cbrt","Math/cbrt","cljs.math/fabs","x","d","js/Float64Array","hi","cljs.math/Zero","cljs.math/xpos","cljs.math/ypos","cljs.math/HI-x","cljs.math/LO-x","cljs.math/HI-y","cljs.math/LO-y","cljs.math/ilogb","hx","lx","hx-zero?","start-ix","start-i","ix","cljs.math/setup-hl","h","l","n","cljs.math/IEEE-fmod","y","js/isNaN","js/isFinite","_","hy","ly","sx","hx<=hy","e36909","vec__36910","cljs.core.nth","vec__36913","vec__36916","vec__36919","vec__36922","iy","vec__36933","hz","lz","cljs.core.ex_info","vec__36949","cljs.math/IEEE-remainder","dividend","divisor","hp","lp","Math/abs","divisor-half","cljs.math/ceil","Math/ceil","cljs.math/floor","Math/floor","cljs.math/copy-sign","magnitude","sign","sbyte","sign-sbyte","mag-sbyte","cljs.math/rint","cljs.math/atan2","Math/atan2","cljs.math/pow","Math/pow","cljs.math/round","Math/round","js/Number.MAX_SAFE_INTEGER","js/Number.MIN_SAFE_INTEGER","cljs.math/random","Math/random","cljs.math/add-exact","cljs.math/subtract-exact","cljs.math/multiply-exact","cljs.math/increment-exact","cljs.math/decrement-exact","cljs.math/negate-exact","cljs.math/xor","cljs.math/floor-div","js/Number.isSafeInteger","cljs.core/long","cljs.math/floor-mod","cljs.math/get-exponent","f","cljs.math/hi-lo->double","cljs.math/power-of-two","js/Error","cljs.math/ulp","e","G__37209","js/Number.MIN_VALUE","shift","cljs.math/signum","cljs.math/sinh","Math/sinh","cljs.math/cosh","Math/cosh","cljs.math/tanh","Math/tanh","cljs.math/hypot","Math/hypot","cljs.math/expm1","Math/expm1","cljs.math/log1p","Math/log1p","cljs.math/add64","sy","lr","c31","b31","c32","hr","cljs.math/next-after","start","direction","vec__37393","ht","lt","vec__37412","cljs.math/next-up","js/Number.POSITIVE_INFINITY","vec__37420","cljs.math/next-down","vec__37425","cljs.math/MAX_SCALE","cljs.math/two-to-the-double-scale-up","cljs.math/two-to-the-double-scale-down","cljs.math/scalb","scaleFactor","vec__37452","scale-factor","scale-increment","exp-delta","Math/max","Math/min","t","exp-adjust"],"sourcesContent":["(ns ^{:doc \"ClojureScript wrapper functions for math operations\"\n      :author \"Paula Gearon\" }\n    cljs.math)\n\n(def\n  ^{:doc \"Constant for Euler's number e, the base for natural logarithms.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\"\n    :added \"1.11.10\"\n    :tag number\n    :const true} E Math/E)\n\n(def\n  ^{:doc \"Constant for pi, the ratio of the circumference of a circle to its diameter.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\"\n    :added \"1.11.10\"\n    :tag number\n    :const true} PI Math/PI)\n\n(def\n  ^{:doc \"Constant used to convert an angular value in degrees to the equivalent in radians\"\n    :private true\n    :added \"1.11.10\"\n    :const true} DEGREES-TO-RADIANS 0.017453292519943295)\n\n(def\n  ^{:doc \"Constant used to convert an angular value in radians to the equivalent in degrees\"\n    :private true\n    :added \"1.11.10\"\n    :const true} RADIANS-TO-DEGREES 57.29577951308232)\n\n(def ^{:private true :const true} TWO-TO-THE-52 0x10000000000000)\n\n(def ^{:private true :const true} SIGNIFICAND-WIDTH32 21)\n\n(def ^{:private true :const true} EXP-BIAS 1023)\n\n(def ^{:private true :const true} EXP-BITMASK32 0x7FF00000)\n\n(def ^{:private true :const true} EXP-MAX EXP-BIAS)\n\n(def ^{:private true :const true} EXP-MIN -1022)\n\n;; js/Number.MIN_VALUE has a bit representation of 0x0000000000000001\n\n;; js/Number.MAX_VALUE has a bit representation of 0x7FEFFFFFFFFFFFFF\n\n(defn- get-little-endian\n  \"Tests the platform for endianness. Returns true when little-endian, false otherwise.\"\n  []\n  (let [a (js/ArrayBuffer. 4)\n        i (js/Uint32Array. a)\n        b (js/Uint8Array. a)]\n    (aset i 0 0x33221100)\n    (zero? (aget b 0))))\n\n(defonce ^:private little-endian? (get-little-endian))\n\n;; the HI and LO labels are terse to reflect the C macros they represent\n(def ^{:private true :doc \"offset of hi integers in 64-bit values\"} HI (if little-endian? 1 0))\n\n(def ^{:private true :doc \"offset of hi integers in 64-bit values\"} LO (- 1 HI))\n\n(def ^{:private true :const true} INT32-MASK 0xFFFFFFFF)\n\n(def ^{:private true :const true} INT32-NON-SIGN-BIT 0x80000000)\n\n(def ^{:private true :const true} INT32-NON-SIGN-BITS 0x7FFFFFFF)\n\n(defn u<\n  {:doc \"unsigned less-than comparator for 32-bit values\"\n   :private true}\n  [a b]\n  ;; compare the top nybble\n  (let [ab (unsigned-bit-shift-right a 28)\n        bb (unsigned-bit-shift-right b 28)]\n    (or (< ab bb)  ;; if the top nybble of a is less then the whole value is less\n        (and (== ab bb)  ;; if the top nybble is equal then compare the remaining bits of both\n             (< (bit-and a 0x0fffffff) (bit-and b 0x0fffffff))))))\n\n(defn ^number sin\n  {:doc \"Returns the sine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\"\n   :added \"1.11.10\"}\n  [a] (Math/sin a))\n\n(defn ^number cos\n  {:doc \"Returns the cosine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\"\n   :added \"1.11.10\"}\n  [a] (Math/cos a))\n\n(defn ^number tan\n  {:doc \"Returns the tangent of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\"\n   :added \"1.11.10\"}\n  [a] (Math/tan a))\n\n(defn ^number asin\n  {:doc \"Returns the arc sine of an angle, in the range -pi/2 to pi/2.\n  If a is ##NaN or |a|>1 => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\"\n   :added \"1.11.10\"}\n  [a] (Math/asin a))\n\n(defn ^number acos\n  {:doc \"Returns the arc cosine of a, in the range 0.0 to pi.\n  If a is ##NaN or |a|>1 => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\"\n   :added \"1.11.10\"}\n  [a] (Math/acos a))\n\n(defn ^number atan\n  {:doc \"Returns the arc tangent of a, in the range of -pi/2 to pi/2.\n  If a is ##NaN => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\"\n   :added \"1.11.10\"}\n  [a] (Math/atan a))\n\n(defn ^number to-radians\n  {:doc \"Converts an angle in degrees to an approximate equivalent angle in radians.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-\"\n   :added \"1.11.10\"}\n  [deg]\n  (* deg DEGREES-TO-RADIANS))\n\n(defn ^number to-degrees\n  {:doc \"Converts an angle in radians to an approximate equivalent angle in degrees.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-\"\n   :added \"1.11.10\"}\n  [r]\n  (* r RADIANS-TO-DEGREES))\n\n(defn ^number exp\n  {:doc \"Returns Euler's number e raised to the power of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf => ##Inf\n  If a is ##-Inf => +0.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\"\n   :added \"1.11.10\"}\n  [a] (Math/exp a))\n\n(defn ^number log\n  {:doc \"Returns the natural logarithm (base e) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log\"\n   :added \"1.11.10\"}\n  [a] (Math/log a))\n\n(defn ^number log10\n  {:doc \"Returns the logarithm (base 10) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\"\n   :added \"1.11.10\"}\n  [a] (Math/log10 a))\n\n(defn ^number sqrt\n  {:doc \"Returns the positive square root of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\"\n   :added \"1.11.10\"}\n  [a] (Math/sqrt a))\n\n(defn ^number cbrt\n  {:doc \"Returns the cube root of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf or ##-Inf => a\n  If a is zero => zero with sign matching a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\"\n   :added \"1.11.10\"}\n  [a] (Math/cbrt a))\n\n(defn ^number fabs\n  {:doc \"Internal function to convert doubles to absolute values.\n  This duplicates the C implementations in Java, in case there is are corner-case differences.\"\n   :private true\n   :added \"1.11.10\"}\n  [x]\n  ;; create a buffer large enough for a double\n  (let [a (js/ArrayBuffer. 8)\n        ;; represent the buffer as a double array\n        d (js/Float64Array. a)\n        ;; represent the buffer as 32 bit ints\n        i (js/Uint32Array. a)\n        hi (if little-endian? 1 0)]\n    ;; insert the double value into the buffer\n    (aset d 0 x)\n    ;; update the sign bit\n    (aset i hi (bit-and (aget i hi) INT32-NON-SIGN-BITS))\n    ;; return the new double\n    (aget d 0)))\n\n(def ^{:private true} Zero\n  ;; a buffer that can hold a pair of 64 bit doubles\n  (let [a (js/ArrayBuffer. 16)\n        ;; represent the buffer as a 2 double array\n        d (js/Float64Array. a)\n        ;; represent the buffer as an array of bytes\n        b (js/Uint8Array. a)]\n    ;; initialize both doubles to 0.0\n    (aset d 0 0.0)\n    (aset d 1 0.0)\n    ;; update the sign bit on the second double\n    (aset b (if little-endian? 15 8) -0x80)\n    ;; save the array of 2 doubles [0.0, -0.0]\n    d))\n\n(def ^{:private true :const true} xpos 0)\n(def ^{:private true :const true} ypos 1)\n(def ^{:private true} HI-x (+ (* 2 xpos) HI))\n(def ^{:private true} LO-x (+ (* 2 xpos) LO))\n(def ^{:private true} HI-y (+ (* 2 ypos) HI))\n(def ^{:private true} LO-y (+ (* 2 ypos) LO))\n\n(defn ^number ilogb\n  {:doc \"internal function for ilogb(x)\"\n   :private true}\n  [hx lx]\n  (if (< hx 0x00100000) ;; subnormal\n    (let [hx-zero? (zero? hx)\n          start-ix (if hx-zero? -1043 -1022)\n          start-i (if hx-zero? lx (bit-shift-left hx 11))]\n      (loop [ix start-ix i start-i]\n        (if-not (> i 0)\n          ix\n          (recur (dec ix) (bit-shift-left i 1)))))\n    (- (bit-shift-right hx 20) 1023)))\n\n(defn ^number setup-hl\n  {:doc \"internal function to setup and align integer words\"\n   :private true}\n  [i h l]\n  (if (>= i -1022)\n    [(bit-or 0x00100000 (bit-and 0x000fffff h)) l]\n    (let [n (- -1022 i)]\n      (if (<= n 31)\n        [(bit-or (bit-shift-left h n) (unsigned-bit-shift-right l (- 32 n))) (bit-shift-left l n)]\n        [(bit-shift-left l (- n 32)) 0]))))\n\n(defn ^number IEEE-fmod\n  {:doc \"Return x mod y in exact arithmetic. Method: shift and subtract.\n  Reimplements __ieee754_fmod from the JDK.\n  Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_fmod.c\n  bit-shift-left and bit-shift-right convert numbers to signed 32-bit\n  Fortunately the values that are shifted are expected to be 32 bit signed.\"\n  :private true}\n  [x y]\n  ;; return exception values\n  (if (or (zero? y) ^boolean (js/isNaN y) (not ^boolean (js/isFinite x)))\n    ##NaN\n\n    ;; create a buffer large enough for 2 doubles\n    (let [a (js/ArrayBuffer. 16)\n          ;; represent the buffer as a double array\n          d (js/Float64Array. a)\n          ;; represent the buffer as 32 bit ints\n          i (js/Uint32Array. a)\n          ;; set the doubles to x and y\n          _ (aset d xpos x)\n          _ (aset d ypos y)\n          hx (aget i HI-x)\n          lx (aget i LO-x)\n          hy (aget i HI-y)\n          ly (aget i LO-y)\n          sx (bit-and hx INT32-NON-SIGN-BIT) ;; capture the sign of x\n          hx (bit-and hx INT32-NON-SIGN-BITS) ;; set x to |x|\n          hy (bit-and hy INT32-NON-SIGN-BITS) ;; set y to |y|\n          hx<=hy (<= hx hy)]\n      (cond\n        ;; additional exception values\n        (and hx<=hy (or (< hx hy) (< lx ly))) x ;; |x|<|y| return x\n        (and hx<=hy (== lx ly)) (aget Zero (unsigned-bit-shift-right sx 31)) ;; |x|=|y| return x*0\n\n        :default\n        ;; determine ix = ilogb(x), iy = ilogb(y)\n        (try\n          (let [ix (ilogb hx lx)\n                iy (ilogb hy ly)\n                ;; set up {hx,lx}, {hy,ly} and align y to x\n                [hx lx] (setup-hl ix hx lx)\n                [hy ly] (setup-hl iy hy ly)\n                ;; fix point fmod\n                [hx lx] (loop [n (- ix iy) hx hx lx lx]\n                          (if (zero? n)\n                            [hx lx]\n                            (let [hz (if (u< lx ly) (- hx hy 1) (- hx hy))\n                                  lz (- lx ly)\n                                  [hx lx] (if (< hz 0)\n                                            [(+ hx hx (unsigned-bit-shift-right lx 31)) (+ lx lx)]\n                                            (if (zero? (bit-or hz lz))\n                                              (throw (ex-info \"Signed zero\" {:zero true}))\n                                              [(+ hz hz (unsigned-bit-shift-right lz 31)) (+ lz lz)]))]\n                              (recur (dec n) (bit-and INT32-MASK hx) (bit-and INT32-MASK lx)))))\n                hz (if (u< lx ly) (- hx hy 1) (- hx hy))\n                lz (- lx ly)\n                [hx lx] (if (>= hz 0) [hz lz] [hx lx])\n\n                _ (when (zero? (bit-or hx lx))\n                    (throw (ex-info \"Signed zero\" {:zero true})))\n                ;; convert back to floating value and restore the sign\n                [hx lx iy] (loop [hx hx lx lx iy iy]\n                             (if-not (< hx 0x00100000)\n                               [hx lx iy]\n                               (recur (+ hx hx (unsigned-bit-shift-right lx 31)) (+ lx lx) (dec iy))))]\n            ;; use these high and low ints to update the double and return it\n            (if (>= iy -1022)\n              (let [hx (bit-or (- hx 0x00100000) (bit-shift-left (+ iy 1023) 20))]\n                (aset i HI-x (bit-or hx sx))\n                (aset i LO-x lx)\n                (aget d xpos))\n              (let [n (- -1022 iy)\n                    [hx lx] (cond\n                              (<= n 20) [(bit-shift-right hx n)\n                                         (bit-or (unsigned-bit-shift-right lx n) (bit-shift-left hx (- 32 n)))]\n                              (<= n 31) [sx\n                                         (bit-or (bit-shift-left hx (- 32 n)) (unsigned-bit-shift-right lx n))]\n                              :default [sx (bit-shift-right hx (- n 32))])]\n                (aset i HI-x (bit-or hx sx))\n                (aset i LO-x lx)\n                (* (aget d xpos) 1.0))))\n          (catch :default _ (aget Zero (unsigned-bit-shift-right sx 31))))))))\n\n(defn ^number IEEE-remainder\n  {:doc \"Returns the remainder per IEEE 754 such that\n    remainder = dividend - divisor * n\n   where n is the integer closest to the exact value of dividend / divisor.\n   If two integers are equally close, then n is the even one.\n   If the remainder is zero, sign will match dividend.\n   If dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN\n   If dividend is finite and divisor is infinite => dividend\n\n   Method: based on fmod return x-[x/p]chopped*p exactlp.\n   Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_remainder.c\n   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-\"\n    :added \"1.11.10\"}\n  [dividend divisor]\n  ;; check for exception values\n  (cond\n    (zero? divisor) ##NaN\n    ^boolean (js/isNaN divisor) ##NaN\n    ;; check if dividend is ##Inf ##-Inf or ##NaN\n    ^boolean (js/isNaN dividend) ##NaN\n    (not ^boolean (js/isFinite dividend)) ##NaN\n    ;; dividend is finish, check if divisor is infinite\n    (not ^boolean (js/isFinite divisor)) dividend\n\n    :default\n    ;; create a buffer large enough for 2 doubles\n    (let [a (js/ArrayBuffer. 16)\n          ;; represent the buffer as a double array\n          d (js/Float64Array. a)\n          ;; represent the buffer as 32 bit ints\n          i (js/Uint32Array. a)]\n      (aset d 0 dividend)\n      (aset d 1 divisor)\n      ;; x gets the dividend high and low ints\n      (let [hx (aget i HI)\n            lx (aget i LO)\n            ;; p gets the divisor high and low ints\n            hp (aget i (+ HI 2))\n            lp (aget i (+ LO 2))\n            ;; sx is the sign bit\n            sx (bit-and hx INT32-NON-SIGN-BIT)\n            ;; strip the sign bit from hp and hx\n            hp (bit-and hp INT32-NON-SIGN-BITS)\n            hx (bit-and hx INT32-NON-SIGN-BITS)\n\n            ;;make x < 2p\n            dividend (if (<= hp 0x7FDFFFFF) (IEEE-fmod dividend (+ divisor divisor)) dividend)]\n        (if (zero? (bit-or (- hx hp) (- lx lp)))\n          (* 0.0 dividend)\n          ;; convert dividend and divisor to absolute values. \n          (let [dividend (Math/abs dividend)\n                divisor (Math/abs divisor)\n                ;; reduce dividend within range of the divisor\n                dividend (if (< hp 0x00200000)\n                           ;; smaller divisor compare 2*dividend to the divisor\n                           (if (> (+ dividend dividend) divisor)\n                             (let [dividend (- dividend divisor)] ;; reduce the dividend\n                               (if (>= (+ dividend dividend) divisor) ;; 2*dividend still larger\n                                 (- dividend divisor) ;; reduce again\n                                 dividend))\n                             dividend)\n                           ;; compare dividend to half the divisor\n                           (let [divisor-half (* 0.5 divisor)]\n                             (if (> dividend divisor-half)\n                               (let [dividend (- dividend divisor)] ;; reduce the dividend\n                                 (if (>= dividend divisor-half) ;; still larger than half divisor\n                                   (- dividend divisor) ;; reduce again\n                                   dividend))\n                               dividend)))]\n            ;; update the buffer with the new dividend value\n            (aset d 0 dividend)\n            ;; calculate a new hi int for the dividend using the saved sign bit\n            (let [hx (bit-xor (aget i HI) sx)]\n              ;; set the dividend with this new sign bit\n              (aset i HI hx)\n              ;; retrieve the updated dividend\n              (aget d 0))))))))\n\n(defn ^number ceil\n  {:doc \"Returns the smallest double greater than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.ceil\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\"\n   :added \"1.11.10\"}\n  [a]\n  (if (some? a)\n    (Math/ceil a)\n    (throw (ex-info \"Unexpected Null passed to ceil\" {:fn \"ceil\"}))))\n\n(defn ^number floor\n  {:doc \"Returns the largest double less than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  If a is less than zero but greater than -1.0 => -0.0\n  Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.floor\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"\n   :added \"1.11.10\"}\n  [a]\n  (if (some? a)\n    (Math/floor a)\n    (throw (ex-info \"Unexpected Null passed to floor\" {:fn \"floor\"}))))\n\n(defn ^number copy-sign\n  {:doc \"Returns a double with the magnitude of the first argument and the sign of\n  the second.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-\"\n   :added \"1.11.10\"}\n  [magnitude sign]\n  ;; create a buffer large enough for 2 doubles\n  (let [a (js/ArrayBuffer. 16)\n        ;; represent the buffer as a double array\n        d (js/Float64Array. a)\n        ;; represent the buffer as bytes\n        b (js/Uint8Array. a)\n        ;; find the offset of the byte that holds the sign bit\n        sbyte (if little-endian? 7 0)]\n    ;; the first double holds the magnitude, the second holds the sign value\n    (aset d 0 magnitude)\n    (aset d 1 sign)\n    ;; read the sign bit from the sign value\n    (let [sign-sbyte (bit-and 0x80 (aget b (+ 8 sbyte)))\n          ;; read all the bits that aren't the sign bit in the same byte of the magnitude\n          mag-sbyte (bit-and 0x7F (aget b sbyte))]\n      ;; combine the sign bit from the sign value and the non-sign-bits from the magnitude value\n      ;; write it back into the byte in the magnitude\n      (aset b sbyte (bit-or sign-sbyte mag-sbyte))\n      ;; retrieve the full magnitude value with the updated byte\n      (aget d 0))))\n\n(defn ^number rint\n  {:doc \"Returns the double closest to a and equal to a mathematical integer.\n  If two values are equally close, return the even one.\n  If a is ##NaN or ##Inf or ##-Inf or zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-\"\n   :added \"1.11.10\"}\n  [a]\n  (let [sign (copy-sign 1.0, a)\n        a (Math/abs a)\n        a (if (< a TWO-TO-THE-52)\n            (- (+ TWO-TO-THE-52 a) TWO-TO-THE-52) a)]\n    (* sign a)))\n\n(defn ^number atan2\n  {:doc \"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\n  Computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.\n  For more details on special cases, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\"\n   :added \"1.11.10\"}\n  [y x] (Math/atan2 y x))\n\n(defn ^number pow\n  {:doc \"Returns the value of a raised to the power of b.\n  For more details on special cases, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\"\n   :added \"1.11.10\"}\n  [a b] (Math/pow a b))\n\n(defn ^number round\n  {:doc \"Returns the closest long to a. If equally close to two values, return the one\n  closer to ##Inf.\n  If a is ##NaN => 0\n  If a is ##-Inf => js/Number.MIN_SAFE_INTEGER\n  If a is ##Inf => js/Number.MAX_SAFE_INTEGER\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\"\n   :added \"1.11.10\"}\n  [a]\n  (cond\n    ^boolean (js/isNaN a) 0\n    ^boolean (js/isFinite a) (Math/round a)\n    (== ##Inf a) js/Number.MAX_SAFE_INTEGER\n    :default js/Number.MIN_SAFE_INTEGER))\n\n(defn ^number random\n  {:doc \"Returns a positive double between 0.0 and 1.0, chosen pseudorandomly with\n  approximately random distribution. Not cryptographically secure. The seed is chosen internally\n  and cannot be selected.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\"\n   :added \"1.11.10\"}\n  [] (Math/random))\n\n(defn ^number add-exact\n  {:doc \"Returns the sum of x and y, throws an exception on overflow. \"\n   :added \"1.11.10\"}\n  [x y]\n  (let [r (clojure.core/+ x y)]\n    (if (or (> r js/Number.MAX_SAFE_INTEGER) (< r js/Number.MIN_SAFE_INTEGER))\n      (throw (ex-info \"Integer overflow\" {:fn \"add-exact\"}))\n      r)))\n\n(defn ^number subtract-exact\n  {:doc \"Returns the difference of x and y, throws ArithmeticException on overflow. \"\n   :added \"1.11.10\"}\n  [x y]\n  (let [r (- x y)]\n    (if (or (> r js/Number.MAX_SAFE_INTEGER) (< r js/Number.MIN_SAFE_INTEGER))\n      (throw (ex-info \"Integer overflow\" {:fn \"subtract-exact\"}))\n      r)))\n\n(defn ^number multiply-exact\n  {:doc \"Returns the product of x and y, throws ArithmeticException on overflow. \"\n   :added \"1.11.10\"}\n  [x y]\n  (let [r (* x y)]\n    (if (or (> r js/Number.MAX_SAFE_INTEGER) (< r js/Number.MIN_SAFE_INTEGER))\n      (throw (ex-info \"Integer overflow\" {:fn \"multiply-exact\"}))\n      r)))\n\n(defn ^number increment-exact\n  {:doc \"Returns a incremented by 1, throws ArithmeticException on overflow.\"\n   :added \"1.11.10\"}\n  [a]\n  (if (or (>= a js/Number.MAX_SAFE_INTEGER) (< a js/Number.MIN_SAFE_INTEGER))\n    (throw (ex-info \"Integer overflow\" {:fn \"increment-exact\"}))\n    (inc a)))\n\n(defn ^number decrement-exact\n  {:doc \"Returns a decremented by 1, throws ArithmeticException on overflow. \"\n   :added \"1.11.10\"}\n  [a]\n  (if (or (<= a js/Number.MIN_SAFE_INTEGER) (> a js/Number.MAX_SAFE_INTEGER))\n    (throw (ex-info \"Integer overflow\" {:fn \"decrement-exact\"}))\n    (dec a)))\n\n(defn ^number negate-exact\n  {:doc \"Returns the negation of a, throws ArithmeticException on overflow. \"\n   :added \"1.11.10\"}\n  [a]\n  (if (or (> a js/Number.MAX_SAFE_INTEGER) (< a js/Number.MIN_SAFE_INTEGER))\n    (throw (ex-info \"Integer overflow\" {:fn \"negate-exact\"}))\n    (- a)))\n\n(defn- xor\n  [^boolean a ^boolean b]\n  (or (and a (not b)) (and (not a) b)))\n\n(defn ^number floor-div\n  {:doc \"Integer division that rounds to negative infinity (as opposed to zero).\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-\"\n   :added \"1.11.10\"}\n  [x y]\n  (if-not (and ^boolean (js/Number.isSafeInteger x) ^boolean (js/Number.isSafeInteger y))\n    (throw (ex-info \"floor-div called with non-safe-integer arguments\"\n                    {:x-int? (js/Number.isSafeInteger x) :y-int? (js/Number.isSafeInteger y)}))\n    (let [r (long (/ x y))]\n      (if (and (xor (< x 0) (< y 0)) (not (== (* r y) x)))\n        (dec r)\n        r))))\n\n(defn ^number floor-mod\n  {:doc \"Integer modulus x - (floorDiv(x, y) * y). Sign matches y and is in the\n  range -|y| < r < |y|.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-\"\n   :added \"1.11.10\"}\n  [x y]\n  (if-not (and ^boolean (js/Number.isSafeInteger x) ^boolean (js/Number.isSafeInteger y))\n    (throw (ex-info \"floor-mod called with non-safe-integer arguments\"\n                    {:x-int? (js/Number.isSafeInteger x) :y-int? (js/Number.isSafeInteger y)}))\n    ;; this avoids using floor-div to keep within the safe integer range\n    (let [r (long (/ x y))]\n      (if (and (xor (< x 0) (< y 0)) (not (== (* r y) x)))\n        (- x (* y r) (- y))\n        (- x (* y r))))))\n\n(defn ^number get-exponent\n  {:doc \"Returns the exponent of d.\n  If d is ##NaN, ##Inf, ##-Inf => max_Float64_exponent + 1\n  If d is zero or subnormal => min_Float64_exponent - 1\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-\"\n   :added \"1.11.10\"}\n  [d]\n  (cond\n    (or ^boolean (js/isNaN d) (not ^boolean (js/isFinite d))) (inc EXP-MAX)\n    (zero? d) (dec EXP-MIN)\n    :default (let [a (js/ArrayBuffer. 8)\n                   f (js/Float64Array. a)\n                   i (js/Uint32Array. a)\n                   hi (if little-endian? 1 0)]\n               (aset f 0 d)\n               (- (bit-shift-right (bit-and (aget i hi) EXP-BITMASK32) (dec SIGNIFICAND-WIDTH32)) EXP-BIAS))))\n\n(defn ^number hi-lo->double\n  {:doc \"Converts a pair of 32 bit integers into an IEEE-754 64 bit floating point number.\n  h is the high 32 bits, l is the low 32 bits.\"\n   :private true}\n  [h l]\n  (let [a (js/ArrayBuffer. 8)\n        f (js/Float64Array. a)\n        i (js/Uint32Array. a)]\n    (aset i LO l)\n    (aset i HI h)\n    (aget f 0)))\n\n(defn ^number power-of-two\n  {:doc \"returns a floating point power of two in the normal range\"\n   :private true}\n  [n]\n  (assert (and (>= n EXP-MIN) (<= n EXP-MAX)))\n  (hi-lo->double\n   (bit-and (bit-shift-left (+ n EXP-BIAS) (dec SIGNIFICAND-WIDTH32)) EXP-BITMASK32) 0))\n\n(defn ^number ulp\n  {:doc \"Returns the size of an ulp (unit in last place) for d.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf\n  If d is zero => Number/MIN_VALUE\n  If d is +/- Number/MAX_VALUE => 2^971\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-\"\n   :added \"1.11.10\"}\n  [d]\n  (cond\n    ^boolean (js/isNaN d) d\n    ^boolean (js/isFinite d)\n    (let [e (get-exponent d)]\n      (case e\n        1024 (Math/abs d)  ;; EXP-MAX + 1\n        -1023 js/Number.MIN_VALUE  ;; EXP-MIN - 1\n        (let [e (- e (+ 31 SIGNIFICAND-WIDTH32))]  ;; SIGNIFICAND_WIDTH64 -1\n          (if (>= e EXP-MIN)\n            (power-of-two e)\n            (let [shift (- e (- EXP-MIN 31 SIGNIFICAND-WIDTH32))]\n              (if (< shift 32)\n                (hi-lo->double 0 (bit-shift-left 1 shift))\n                (hi-lo->double (bit-shift-left 1 (- shift 32)) 0)))))))\n    :default ##Inf))\n\n(defn ^number signum\n  {:doc \"Returns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => sign of d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-\"\n   :added \"1.11.10\"}\n  [d]\n  (if (or (zero? d) ^boolean (js/isNaN d))\n    d\n    (copy-sign 1.0 d)))\n\n(defn ^number sinh\n  {:doc \"Returns the hyperbolic sine of x, (e^x - e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf or zero => x\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\"\n   :added \"1.11.10\"}\n  [x] (Math/sinh x))\n\n(defn ^number cosh\n  {:doc \"Returns the hyperbolic cosine of x, (e^x + e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf => ##Inf\n  If x is zero => 1.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\"\n   :added \"1.11.10\"}\n  [x] (Math/cosh x))\n\n(defn ^number tanh\n  {:doc \"Returns the hyperbolic tangent of x, sinh(x)/cosh(x).\n  If x is ##NaN => ##NaN\n  If x is zero => zero, with same sign\n  If x is ##Inf => +1.0\n  If x is ##-Inf => -1.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\"\n   :added \"1.11.10\"}\n  [x] (Math/tanh x))\n\n(defn ^number hypot\n  {:doc \"Returns sqrt(x^2 + y^2) without intermediate underflow or overflow.\n  If x or y is ##Inf or ##-Inf => ##Inf\n  If x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\"\n   :added \"1.11.10\"}\n  [x y] (Math/hypot x y))\n\n(defn ^number expm1\n  {:doc \"Returns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).\n  If x is ##NaN => ##NaN\n  If x is ##Inf => #Inf\n  If x is ##-Inf => -1.0\n  If x is zero => x\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1\"\n   :added \"1.11.10\"}\n  [x] (Math/expm1 x))\n\n(defn ^number log1p\n  {:doc \"Returns ln(1+x). For small values of x, log1p(x) is more accurate than\n  log(1.0+x).\n  If x is ##NaN or ##-Inf or < -1 => ##NaN\n  If x is -1 => ##-Inf\n  If x is ##Inf => ##Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p\"\n   :added \"1.11.10\"}\n  [x] (Math/log1p x))\n\n(defn ^number add64\n  {:doc \"Takes the high and low words for 2 different 64 bit integers, and adds them.\n  This handles overflow from the low-order words into the high order words.\"\n   :private true}\n  [hx lx hy ly]\n  (let [sx (unsigned-bit-shift-right (bit-and lx INT32-NON-SIGN-BIT) 31)\n        sy (unsigned-bit-shift-right (bit-and ly INT32-NON-SIGN-BIT) 31)\n        lr (+ (bit-and INT32-NON-SIGN-BITS lx) (bit-and INT32-NON-SIGN-BITS ly))\n        c31 (unsigned-bit-shift-right (bit-and lr INT32-NON-SIGN-BIT) 31)\n        b31 (+ sx sy c31)\n        lr (bit-or (bit-and lr INT32-NON-SIGN-BITS) (bit-shift-left b31 31))\n        c32 (bit-shift-right b31 1)\n        hr (bit-and INT32-MASK (+ hx hy c32))]\n    [hr lr]))\n\n(defn ^number next-after\n  {:doc \"Returns the adjacent floating point number to start in the direction of\n  the second argument. If the arguments are equal, the second is returned.\n  If either arg is #NaN => #NaN\n  If both arguments are signed zeros => direction\n  If start is +-Number/MIN_VALUE and direction would cause a smaller magnitude\n    => zero with sign matching start\n  If start is ##Inf or ##-Inf and direction would cause a smaller magnitude\n    => Number/MAX_VALUE with same sign as start\n  If start is equal to +=Number/MAX_VALUE and direction would cause a larger magnitude\n    => ##Inf or ##-Inf with sign matching start\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-\"\n   :added \"1.11.10\"}\n  [start direction]\n  ; Branch to descending case first as it is more costly than ascending\n  ; case due to start != 0.0f conditional.\n  (let [a (js/ArrayBuffer. 8)\n        f (js/Float64Array. a)\n        i (js/Uint32Array. a)]\n    (cond\n      (> start direction) (if-not (zero? start)\n                            (let [_ (aset f 0 start)\n                                  ht (aget i HI)\n                                  lt (aget i LO)\n                                  ;; ht&lt != 0 since start != 0.0\n                                  ;; So long as the top bit is not set, then whole number is > 0\n                                  [hr lr] (if (zero? (bit-and ht INT32-NON-SIGN-BIT))\n                                            (add64 ht lt 0xFFFFFFFF 0xFFFFFFFF)\n                                            (add64 ht lt 0 1))]\n                              (aset i HI hr)\n                              (aset i LO lr)\n                              (aget f 0))\n                            ;; start == 0.0 && direction < 0.0\n                            (- js/Number.MIN_VALUE))\n      ;; Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 => +0.0)\n      ;; then bitwise convert start to integer\n      (< start direction) (let [_ (aset f 0 (+ start 0.0))\n                                ht (aget i HI)\n                                lt (aget i LO)\n                                [hr lr] (if (zero? (bit-and ht INT32-NON-SIGN-BIT))\n                                          (add64 ht lt 0 1)\n                                          (add64 ht lt 0xFFFFFFFF 0xFFFFFFFF))]\n                            (aset i HI hr)\n                            (aset i LO lr)\n                            (aget f 0))\n      (== start direction) direction\n      :default (+ start direction))))  ;; isNaN(start) || isNaN(direction)\n\n(defn ^number next-up\n  {:doc \"Returns the adjacent double of d in the direction of ##Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => ##Inf\n  If d is zero => Number/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-\"\n   :added \"1.11.10\"}\n  [d]\n  ;; Use a single conditional and handle the likely cases first\n  (if (< d js/Number.POSITIVE_INFINITY)\n    (let [a (js/ArrayBuffer. 8)\n          f (js/Float64Array. a)\n          i (js/Uint32Array. a)\n          ;; Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 => +0.0)\n          _ (aset f 0 (+ d 0.0))\n          ht (aget i HI)\n          lt (aget i LO)\n          [hr lr] (if (zero? (bit-and ht INT32-NON-SIGN-BIT))\n                    (add64 ht lt 0 1)\n                    (add64 ht lt 0xFFFFFFFF 0xFFFFFFFF))]\n      (aset i HI hr)\n      (aset i LO lr)\n      (aget f 0))\n    ;; d is NaN or +Infinity\n    d))\n\n(defn ^number next-down\n  {:doc \"Returns the adjacent double of d in the direction of ##-Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => Number/MAX_VALUE\n  If d is zero => -Number/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-\"\n   :added \"1.11.10\"}\n  [d]\n  (cond\n    (or ^boolean (js/isNaN d) (== ##-Inf d)) d\n    (zero? d) (- js/Number.MIN_VALUE)\n    :default\n    (let [a (js/ArrayBuffer. 8)\n          f (js/Float64Array. a)\n          i (js/Uint32Array. a)\n          _ (aset f 0 d)\n          ht (aget i HI)\n          lt (aget i LO)\n          [hr lr] (if (> d 0)\n                    (add64 ht lt 0xFFFFFFFF 0xFFFFFFFF)\n                    (add64 ht lt 0 1))]\n      (aset i HI hr)\n      (aset i LO lr)\n      (aget f 0))))\n\n(def ^:private MAX_SCALE (+ EXP-MAX (- EXP-MIN) SIGNIFICAND-WIDTH32 32 1))\n\n(def ^:private two-to-the-double-scale-up (power-of-two 512))\n\n(def ^:private two-to-the-double-scale-down (power-of-two -512))\n\n(defn ^number scalb\n  {:doc \"Returns d * 2^scaleFactor, scaling by a factor of 2. If the exponent\n  is between min_Float64_exponent and max_Float64_exponent.\n  scaleFactor is an integer\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively\n  If d is zero => zero of same sign as d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-\"\n   :added \"1.11.10\"}\n  [d scaleFactor]\n  (let [[scale-factor\n         scale-increment\n         exp-delta] (if (< scaleFactor 0)\n                      [(Math/max scaleFactor (- MAX_SCALE)) -512 two-to-the-double-scale-down]\n                      [(Math/min scaleFactor MAX_SCALE) 512 two-to-the-double-scale-up])\n        ;; Calculate (scaleFactor % +/-512), 512 = 2^9\n        ;; technique from \"Hacker's Delight\" section 10-2\n        t (unsigned-bit-shift-right (bit-shift-right scale-factor 8) 23)\n        exp-adjust (- (bit-and (+ scale-factor t) 511) t)]\n    (loop [d (* d (power-of-two exp-adjust)) scale-factor (- scale-factor exp-adjust)]\n      (if (zero? scale-factor)\n        d\n        (recur (* d exp-delta) (- scale-factor scale-increment))))))\n"]}