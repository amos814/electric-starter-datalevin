{"version":3,"sources":["missionary/impl/Zip.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__40332","js/Error","args40330","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Zip/Process","missionary.impl.Zip/->Process","combinator","notifier","flusher","iterators","results","pending","z","missionary.impl.Zip/cancel","missionary.impl.Zip/transfer","its","n__5636__auto__","i","temp__5808__auto__","it","res","e40353","cljs.core/deref","e","fexpr__40350","missionary.impl.Zip/run","f","fs","n","t","c","cljs.core/count","cljs.core/iter","cljs.core.object_array","cnt","flushed","temp__5806__auto__","e40361","_","index","G__40364","G__40365","fexpr__40363","p","fexpr__40367","fexpr__40368","fexpr__40369"],"sourcesContent":["(ns missionary.impl.Zip)\n\n(declare cancel transfer)\n(deftype Process\n  [combinator notifier flusher\n   iterators results\n   ^number pending]\n  IFn\n  (-invoke [z] (cancel z))\n  IDeref\n  (-deref [z] (transfer z)))\n\n(defn cancel [^Process z]\n  (let [its (.-iterators z)]\n    (dotimes [i (alength its)]\n      (when-some [it (aget its i)] (it)))))\n\n(defn transfer [^Process z]\n  (let [its (.-iterators z)\n        res (.-results z)]\n    (try (set! (.-pending z) (dec (.-pending z)))\n         (dotimes [i (alength its)]\n           (set! (.-pending z) (inc (.-pending z)))\n           (aset res i @(aget its i)))\n         (.apply (.-combinator z) nil res)\n         (catch :default e\n           (set! (.-notifier z) (.-flusher z))\n           (throw e))\n         (finally\n           (set! (.-pending z) (inc (.-pending z)))\n           (when (zero? (.-pending z)) ((.-notifier z)))\n           (when (identical? (.-notifier z) (.-flusher z)) (cancel z))))))\n\n(defn run [f fs n t]\n  (let [c (count fs)\n        i (iter fs)\n        z (->Process f n nil (object-array c) (object-array c) 0)]\n    (set! (.-flusher z)\n      #(let [its (.-iterators z)\n             cnt (alength its)]\n         (loop []\n           (let [flushed (loop [i 0\n                                f 0]\n                           (if (< i cnt)\n                             (recur\n                               (inc i)\n                               (if-some [it (aget its i)]\n                                 (do (try @it (catch :default _))\n                                     (inc f)) f)) f))]\n             (if (zero? flushed)\n               (t) (when (zero? (set! (.-pending z) (+ (.-pending z) flushed)))\n                     (recur)))))))\n    (loop [index 0]\n      (aset (.-iterators z) index\n        ((.next i)\n         #(let [p (dec (.-pending z))]\n            (set! (.-pending z) p)\n            (when (zero? p) ((.-notifier z))))\n         #(do (aset (.-iterators z) index nil)\n              (set! (.-notifier z) (.-flusher z))\n              (let [p (set! (.-pending z) (dec (.-pending z)))]\n                (when-not (neg? p)\n                  (cancel z)\n                  (when (zero? p) ((.-notifier z))))))))\n      (when (.hasNext i) (recur (inc index))))\n    (when (zero? (set! (.-pending z) (+ (.-pending z) c)))\n      ((.-notifier z))) z))\n"]}