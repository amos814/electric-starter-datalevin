{"version":3,"sources":["contrib/str.cljc"],"mappings":";AAOA,yBAAA,zBAAMA,0DAAYC;AAAlB,AACE,IAAAC,mBAAA,KAAAC;AAAA,AAAA,IAAAC,kDAAAC;IAAAC,6CAAAC;IAAAC,kDAAA;IAAAC,6CAAA,WAAAC;AAAA,AAAA,OAAAR,wBAAAQ;;AAAA,AAAA,CAAAL,sCAAAG;;AAAA,CAAAD,iCAAAE;;AAAA,IAAA,AACE,IAAAE,uDAAUE;IAAVD,uDAAA;AAAA,AAAA,8CAAAA,7CAAUC;;AAAV,IAAA,AAGE,IAAAC,0DAAAC;IAAAC,0DACEC;AADF,AAAA,CAAAF,gDAAAC;;AAAA,IAAA,AAEE,AAACE,iDAAsBjB;UAFzB,AAAA,CAAAc,gDAAAD;WAHF,AAAA,8CAAAH,7CAAUE;WADZ,AAAA,CAAAN,iCAAAD;;AAAA,CAAAD,sCAAAD;;AAAA,mDAAAF;;AAQF,AAYA,kCAAA,lCAAmBiB,4EAAeC,EAAEC;AAApC,AASE,OAACC,+BAAyB,AAACC,0BAA0B,4CAAKH,IAChC,AAACG,0BAA0B,4CAAKF;;AAE5D,AASA,iCAAA,jCAAMG,0EAAcC,KAAKJ;AAAzB,AACE,IAAMK,SAAO,AAACH,0BAA0B,4CAAKF;AAA7C,AACE,sBAAA,WAAAM,1BAACC;AAAD,AAAO,oBAAAD;AAAA,AAAQ,OAACL,+BAAyB,AAACC,0BAA0B,4CAAAI,mBAASD;;AAAtE;;GAA+ED;;AAE1F,AAOA,2BAAA,3BAAMI,8DAAQC;AAAd,AAAiB,SAAI,EAAK,OAASA,oBAAG,wBAAA,vBAAO,AAACC,gBAAMD,mBAC/B,MAAA,LAAMA;;AAE3B,AAKA,4BAAA,5BAAME,gEAAYF;AAAlB,AAAqB,GAAI,AAACD,yBAAOC;AAAZ;;AAAmBA;;;AAExC,AAMA;;;4BAAA,5BAAMG,gEAAmEH;AAAzE,AACE,GAAA,GAAQ,OAASA;AACfA;;AACA,GAAA,GAAQ,AAACI,4BAAsBJ;AAAGA;;AAAlC;;;;AAEJ,AAWA,AAAA,qBAAA,6BAAAK,lDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mDAAA,nDAAMD,8DAEFE,EAAEC;AAFN,AAES,IAAAC,oBAASF;AAAT,AAAA,GAAA,cAAAE,dAAKE;AAALF;;AAAA,IAAAC,oBAAWF;AAAX,AAAA,GAAA,cAAAE,dAAKC;AAAL,AAAAD;;AAAA;;;;;AAFT,CAAA,mDAAA,nDAAML,8DAGFE,EAAEC,EAAEI;AAHR,AAGW,IAAAH,oBAASF;AAAT,AAAA,GAAA,cAAAE,dAAKE;AAALF;;AAAA,IAAAA,wBAAWD;AAAX,AAAA,GAAA,cAAAC,dAAKE;AAALF;;AAAA,IAAAC,oBAAaE;AAAb,AAAA,GAAA,cAAAF,dAAKC;AAAL,AAAAD;;AAAA;;;;;;AAHX,CAAA,6CAAA,7CAAML;;AAAN,AAKA","names":["contrib.str/pprint-str","x","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__39400","cljs.core/*print-newline*","*print-fn*-orig-val__39401","cljs.core/*print-fn*","*print-newline*-temp-val__39402","*print-fn*-temp-val__39403","x__5691__auto__","*print-right-margin*-orig-val__39404","*print-right-margin*-temp-val__39405","cljs.pprint/*print-right-margin*","*print-pprint-dispatch*-orig-val__39406","cljs.pprint/*print-pprint-dispatch*","*print-pprint-dispatch*-temp-val__39407","cljs.pprint/code-dispatch","cljs.pprint.pprint","contrib.str/includes-str?","v","needle","clojure.string/includes?","clojure.string/lower-case","contrib.str/any-matches?","coll","substr","p1__39408#","cljs.core/some","contrib.str/empty?","s","cljs.core/count","contrib.str/empty->nil","contrib.str/blank->nil","clojure.string/blank?","var_args","G__39423","contrib.str/or-str","js/Error","a","b","or__39180__auto__","or__39179__auto__","cljs.core/seq","c"],"sourcesContent":["(ns contrib.str\n  (:refer-clojure :exclude [empty?])\n  (:require clojure.pprint\n            clojure.string\n            [contrib.data :refer [orp]]\n            [hyperfiddle.rcf :refer [tests]]))\n\n(defn pprint-str [x]\n  (with-out-str\n    (binding [clojure.pprint/*print-right-margin* 100\n              #_#_clojure.pprint/*print-miser-width* 1\n              #_#_clojure.pprint/*print-pprint-dispatch* hyperfiddle.pprint/simple-dispatch]\n      (clojure.pprint/with-pprint-dispatch\n        clojure.pprint/code-dispatch\n        (clojure.pprint/pprint x)))))\n\n(comment\n  (pprint-str (range 50))\n  (pprint-str '{(user.gender-shirt-size/submissions \"\" .)\n                [{:db/id 9}\n                 {:db/id 10}\n                 {:db/id 11}]})\n  (pprint-str '{(user.gender-shirt-size/submissions \"bob\" .)\n                [{:dustingetz/gender {:db/ident :dustingetz/male},\n                  :dustingetz/email \"bob@example.com\",\n                  :dustingetz/shirt-size {:db/ident :dustingetz/mens-large},\n                  :db/id 10}]}))\n\n(defn ^:deprecated includes-str? [v needle]\n  ; perf - https://clojurians.slack.com/archives/C03RZMDSH/p1666290300539289\n  ; want to reduce memory pressure moreso than optimzie the speed\n  ; if you want a case-insensitive match I recommend using something which doesn\u2019t force new string\n  ; allocations; use org.apache.commons.lang3.StringUtils.containsIgnoreCase() which uses\n  ; String.regionMatches under the hood. Or better yet use d/filter on d/datoms (can we pass that\n  ; as an input to another query?)\n\n  ; Is this deprecated because of performances?\n  (clojure.string/includes? (clojure.string/lower-case (str v))\n                            (clojure.string/lower-case (str needle))))\n\n(tests\n  (includes-str? \"alice\" \"e\") := true\n  (includes-str? \"alice\" \"f\") := false\n  (includes-str? \"alice\" \"\") := true\n  (includes-str? \"alice\" nil) := true\n  (includes-str? nil nil) := true\n  (includes-str? nil \"\") := true\n  (includes-str? \"\" nil) := true)\n\n(defn any-matches? [coll needle]\n  (let [substr (clojure.string/lower-case (str needle))]\n    (some #(when % (clojure.string/includes? (clojure.string/lower-case (str %)) substr)) coll)))\n\n(tests\n  (any-matches? [1 2 nil 3] \"3\") := true\n  (any-matches? [\"xyz\"] \"Y\") := true\n  (any-matches? [\"ABC\"] \"abc\") := true\n  (any-matches? [\"abc\"] \"d\") := nil)\n\n\n(defn empty? [s] (or (and (string? s) (zero? (count s)))\n                     (nil? s)))\n\n(tests\n  (empty? \"\") := true\n  (empty? nil) := true\n  (empty? \" \") := false)\n\n(defn empty->nil [s] (if (empty? s) nil s))\n\n(tests\n  (empty->nil nil) := nil\n  (empty->nil \"\") := nil\n  (empty->nil \" \") := \" \"\n  (empty->nil \"a\") := \"a\")\n\n(defn blank->nil \"Nullify empty strings, identity on all other values.\" [s]\n  (if-not (string? s)\n    s ; don't fail\n    (if-not (clojure.string/blank? s) s nil)))\n\n(tests\n  (blank->nil nil) := nil\n  (blank->nil \"\") := nil\n  (blank->nil \" \") := nil\n  (blank->nil \"      \") := nil\n  (blank->nil \"a\") := \"a\"\n  (not= (blank->nil \"   a\") nil) := true\n  (not= (blank->nil \"   a   \") nil) := true\n  (blank->nil 1) := 1\n  (blank->nil nil) := nil)\n\n(defn or-str\n  #_([& args] (apply orp seq args))                         ; can't apply macro todo\n  ([a b] (orp seq a b))\n  ([a b c] (orp seq a b c)))\n\n(tests\n  (or-str nil \"b\") := \"b\"\n  (or-str \"\" \"b\") := \"b\"\n  (or-str \"a\" \"b\") := \"a\"\n  (or-str \" \" \"b\") := \" \")"]}