{"version":3,"sources":["hyperfiddle/electric/impl/io.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","com.cognitect.transit.types/UUID","hyperfiddle.electric.impl.io/default-write-handler","cognitect.transit.write_handler","x","hyperfiddle.electric.impl.io/-last-unserializable-for-repl","js/console.log","cljs.core.pr_str","cljs.core/type","_","hyperfiddle.electric.impl.io/->cache","size","G__43529","arr43530","cljs.core/identity","cljs.core.object_array","hyperfiddle.electric.impl.io/cache-add","cache","k","v","i","cljs.core/count","cljs.core._EQ_","hyperfiddle.electric.impl.array-fields/get","arr43532","widx","p1__43531#","hyperfiddle.electric.impl.array-fields/getswap","cljs.core/mod","arr43533","hyperfiddle.electric.impl.io/cache-get","hyperfiddle.electric.impl.io/cache->map","ac","cljs.core/transient","cljs.core.assoc_BANG_","cljs.core/persistent!","hyperfiddle.electric.impl.io/!ex-cache","hyperfiddle.electric.impl.io/save-original-ex!","fi","id","hyperfiddle.electric.debug/ex-id","temp__5808__auto__","cause","cljs.core/ex-cause","js/hyperfiddle.electric.FailureInfo","hyperfiddle.electric.impl.io/get-original-ex","hyperfiddle.electric.impl.io/*write-handlers*","hyperfiddle.electric.impl.io/failure-writer","err","js/missionary.Cancelled","js/hyperfiddle.electric.Pending","js/hyperfiddle.electric.Remote","hyperfiddle.electric.debug/serializable","cljs.core/ex-data","cljs.core/ex-message","hyperfiddle.electric.impl.io/write-opts","cljs.core.merge","js/hyperfiddle.electric.Failure","hyperfiddle.electric.impl.io/*read-handlers*","hyperfiddle.electric.impl.io/failure-reader","cognitect.transit/read-handler","p__43541","vec__43543","seq__43544","cljs.core/seq","first__43545","cljs.core/first","cljs.core/next","tag","args","G__43546","cljs.core/Keyword","js/Error","vec__43547","cljs.core.nth","message","data","hyperfiddle.electric.debug.ex_info_STAR_","vec__43550","or__5045__auto__","hyperfiddle.electric.impl.io/read-opts","hyperfiddle.electric.impl.io/set-ints","cljs.core.partial","cljs.core/reduce-kv","r","n","offset","G__43560","hyperfiddle.electric.impl.io/encode-numbers","xs","required","G__43562","js/ArrayBuffer","js/DataView","hyperfiddle.electric.impl.io/decode-numbers","b","cljs.core/vec","js/hyperfiddle","js/hyperfiddle.electric","js/hyperfiddle.electric.impl","js/hyperfiddle.electric.impl.io","js/hyperfiddle.electric.impl.io.t_hyperfiddle$electric$impl$io43564","hyperfiddle.electric.impl.io/t_hyperfiddle$electric$impl$io43564","_43566","meta43565","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hyperfiddle.electric.impl.io/->t_hyperfiddle$electric$impl$io43564","rf","l","G__43571","G__43572","!cache","cljs.core.atom","hyperfiddle.electric.impl.io/transit-writer","cljs.core.swap_BANG_","p__43573","map__43574","cljs.core/--destructure-map","cljs.core.get","write-handlers","writer","cljs.core.assoc","cognitect.transit.writer","hyperfiddle.electric.impl.io/encode","cognitect.transit/write","hyperfiddle.electric.impl.io/transit-reader","p__43576","map__43577","read-handlers","reader","cognitect.transit.reader","hyperfiddle.electric.impl.io/decode","s","cognitect.transit/read","hyperfiddle.electric.impl.io/decode-str","e43578","G__43579","js/console.debug","t","cljs.core.ex_info","hyperfiddle.electric.impl.io/chunk-size","hyperfiddle.electric.impl.io/message-reader","?read","cr43585-state","cr43585-place-4","missionary.core/unpark","cr43585-place-5","cr43585-place-6","cr43585-place-7","cr43585-block-9","cr43585-block-3","cr43585-exception","e43646","cr43585-place-0","cr43585-place-1","cljs.core/IVector","cr43585-place-2","cr43585-block-1","e43648","cr43585-place-37","cr43585-place-38","cr43585-place-39","cr43585-place-40","cr43585-place-41","cr43585-place-42","e43651","cr43585-place-11","cr43585-place-14","cr43585-place-15","cr43585-place-16","cr43585-place-17","cr43585-place-18","cr43585-place-19","cr43585-place-20","cr43585-place-21","cr43585-place-22","cr43585-place-23","cr43585-place-24","cr43585-place-25","cr43585-place-26","cr43585-place-27","cr43585-place-28","cr43585-block-7","cr43585-block-5","e43657","cr43585-place-3","cr43585-block-2","missionary.core/park","e43670","cr43585-place-8","cr43585-place-9","cr43585-place-10","cr43585-place-12","cr43585-place-13","cr43585-block-4","e43671","cr43585-place-35","cr43585-place-36","cr43585-block-10","e43675","e43682","cr43585-place-32","cr43585-place-33","cr43585-place-34","cr43585-block-8","e43683","cr43585-place-29","cr43585-block-6","e43686","cr43585-place-30","cr43585-place-31","e43687","cloroutine.impl/coroutine","G__43688","cr43585-block-0","missionary.core/sp-run","G__43650","fexpr__43649","G__43655","G__43656","fexpr__43654","cljs.core/conj!","G__43653","fexpr__43652","G__43681","fexpr__43680","G__43678","G__43679","fexpr__43677","G__43674","fexpr__43673","G__43659","fexpr__43658","G__43661","G__43662","G__43663","fexpr__43660","cljs.core/reduce","G__43668","fexpr__43667","G__43685","fexpr__43684","p1__43689#","hyperfiddle.electric.impl.io/message-writer","write","cr43690-state","cr43690-place-21","cr43690-place-44","cr43690-place-45","cr43690-block-1","cr43690-exception","e43778","cr43690-place-5","cr43690-place-10","cr43690-place-11","cr43690-place-12","cr43690-place-13","cr43690-place-14","cr43690-place-15","cr43690-place-16","cr43690-place-17","cr43690-place-18","cr43690-place-19","cr43690-place-20","cr43690-place-22","cr43690-place-23","cr43690-place-24","cr43690-place-25","cr43690-place-26","cr43690-place-27","cr43690-block-3","e43779","cr43690-place-48","cr43690-place-62","cr43690-place-63","cr43690-place-64","cr43690-place-65","cr43690-place-66","cr43690-place-67","cr43690-place-68","cr43690-place-69","cr43690-place-70","cr43690-place-71","cr43690-block-12","e43791","cr43690-place-46","cr43690-place-47","cr43690-block-8","e43803","cr43690-place-55","cr43690-place-56","cr43690-place-57","cr43690-place-58","cr43690-place-59","cr43690-place-60","cr43690-block-10","e43806","cr43690-place-49","cr43690-place-50","cr43690-place-51","cr43690-place-52","cr43690-place-53","cr43690-place-54","cr43690-block-11","cr43690-block-9","e43812","cr43690-place-0","cr43690-place-1","cr43690-place-2","cr43690-place-3","cr43690-place-4","e43816","cr43690-place-9","e43825","cr43690-block-14","e43826","cr43690-place-72","cr43690-place-73","cr43690-place-74","cr43690-place-75","cr43690-place-76","e43827","cr43690-place-28","cr43690-place-29","cr43690-place-30","cr43690-block-5","e43832","cr43690-block-4","cr43690-place-61","cr43690-block-13","e43835","cr43690-place-40","cr43690-place-41","cr43690-place-42","cr43690-place-43","cr43690-block-6","e43836","cr43690-place-31","cr43690-place-32","cr43690-place-33","cr43690-place-34","cr43690-place-35","cr43690-place-36","cljs.core/IMap","cr43690-place-37","cr43690-place-38","cr43690-place-39","e43839","cr43690-place-6","cr43690-place-7","cr43690-place-8","cr43690-block-7","cr43690-block-2","e43844","G__43846","cr43690-block-0","G__43821","fexpr__43820","G__43818","fexpr__43817","cljs.core/pop","G__43782","fexpr__43781","G__43784","fexpr__43783","G__43786","fexpr__43785","G__43788","G__43789","fexpr__43787","G__43838","fexpr__43837","G__43834","fexpr__43833","G__43841","G__43842","G__43843","fexpr__43840","cljs.core/ex-info","G__43805","fexpr__43804","cljs.core/peek","G__43814","fexpr__43813","G__43802","fexpr__43801","G__43800","fexpr__43799","G__43796","G__43797","G__43798","fexpr__43795","cljs.core/subvec","G__43829","G__43830","fexpr__43828","G__43811","fexpr__43810","G__43809","fexpr__43808","hyperfiddle.electric.impl.io/decoder","G__43849","cljs.core.conj","cljs.core.into","hyperfiddle.electric.impl.io/encoder","cljs.core.reduce","cljs.core.eduction","cljs.core.map","cljs.core.partition_all","G__43850","G__43851","G__43852","var_args","G__43854","hyperfiddle.electric.impl.io/foreach"],"sourcesContent":[";; Facilities for encoding/decoding of Electric protocol messages.\n;; * Data frames can be arbitrary clojure data or Electric failures. Serialization is done via transit json, the failure\n;; error is preserved if it's an instance of `hyperfiddle.electric.Pending` or `hyperfiddle.electric.Cancelled`, otherwise\n;; the error is logged and turned into an instance of `hyperfiddle.electric.Remote`.\n;; * Control frames are vectors of signed integers. Serialization is the concatenation of the binary representation of\n;; these numbers as fixed-length 32-bit, big endian.\n\n(ns ^:no-doc hyperfiddle.electric.impl.io\n  (:require [missionary.core :as m]\n            [cognitect.transit :as t]\n            #?(:clj [clojure.tools.logging :as log])\n            [hyperfiddle.electric.debug :as dbg]\n            [hyperfiddle.rcf :as rcf :refer [tests with tap %]]\n            #?(:cljs [com.cognitect.transit.types])\n            [hyperfiddle.electric.impl.array-fields :as a])\n  (:import (missionary Cancelled)\n           (hyperfiddle.electric Failure Pending Remote FailureInfo)\n           #?(:clj (java.nio ByteBuffer))\n           #?(:clj (java.io ByteArrayInputStream ByteArrayOutputStream))\n           #?(:clj (clojure.lang IReduceInit))))\n\n#?(:cljs (extend-type com.cognitect.transit.types/UUID IUUID)) ; https://github.com/hyperfiddle/hyperfiddle/issues/728\n\n(def default-write-handler ; Intercepts unserializable values, logs and return nil\n  (t/write-handler ; Adapted from `com.cognitect.transit.impl.WriteHandlers.NullWriteHandler`\n    (fn [x]\n      (def -last-unserializable-for-repl x)\n      (#?(:clj log/info, :cljs js/console.log) \"Unserializable reference transfer:\" (pr-str (type x)) (str x))\n      \"_\")\n    (fn [x] nil)\n    (fn [_] \"\")))\n\n(defn ->cache \"Builds a minimal, cljc map/bounded-queue cache.\n  One slot per key (map).\n  Reaching `size` pops oldest value (bounded-queue).\" [size]\n  (doto (object-array (inc (* size 2))) (a/set (* size 2) 0)))\n(defn cache-add [cache k v]\n  (when-not (loop [i 0]\n              (when (< i (dec (count cache)))\n                (if (= k (a/get cache i))\n                  (do (a/set cache (inc i) v) true)\n                  (recur (+ i 2)))))\n    (let [widx (a/getswap cache (dec (count cache)) #(mod (+ % 2) (dec (count cache))))]\n      (a/set cache widx k, (inc widx) v))))\n(defn cache-get [cache k]\n  (loop [i 0]\n    (when (< i (dec (count cache)))\n      (if (= k (a/get cache i))\n        (a/get cache (inc i))\n        (recur (+ i 2))))))\n(defn cache->map [cache]\n  (loop [i 0, ac (transient {})]\n    (if (< i (dec (count cache)))\n      (recur (+ i 2) (assoc! ac (a/get cache i) (a/get cache (inc i))))\n      (persistent! ac))))\n\n(tests \"keyed cache\"\n  (def !c (->cache 1))\n  (cache-add !c 1 2) (cache-get !c 1) := 2\n  (cache-add !c 1 3) (cache-get !c 1) := 3\n  (cache-add !c 2 4) (cache-get !c 2) := 4\n  (cache->map !c) := {2 4}\n\n  \"size 2\"\n  (def !c (->cache 2))\n  (cache-add !c 1 1)\n  (cache-add !c 2 2)\n  (cache-add !c 2 2)\n  (cache->map !c) := {1 1, 2 2})\n\n(def !ex-cache (->cache 16))\n(defn save-original-ex! [fi]\n  (let [id (dbg/ex-id fi)]\n    (when-some [cause (ex-cause fi)]\n      (when-not (instance? FailureInfo cause)\n        (cache-add !ex-cache id cause)))\n    id))\n(defn get-original-ex [id] (cache-get !ex-cache id))\n\n(def ^:dynamic *write-handlers* nil)\n\n(def failure-writer (t/write-handler\n                      (fn [_] \"failure\")\n                      (fn [x]\n                        (let [err (.-error ^Failure x)]\n                          (cond (instance? Cancelled err) [:cancelled]\n                                (instance? Pending err)   [:pending]\n                                (instance? Remote err)    [:remote (dbg/serializable (ex-data err))]\n                                :else                     [:exception (ex-message err) (dbg/serializable (ex-data err))\n                                                           (save-original-ex! err)])))))\n\n(defn write-opts []\n  {:handlers (merge *write-handlers*\n               {Failure failure-writer\n                :default default-write-handler}) ; cljs\n   :default-handler default-write-handler}) ; clj\n\n(def ^:dynamic *read-handlers* nil)\n\n(def failure-reader (t/read-handler\n                      (fn [[tag & args]]\n                        (case tag\n                          :exception (let [[message data id] args]\n                                       (Failure. (dbg/ex-info* message data id nil)))\n                          :remote    (let [[data] args]\n                                       (Failure. (dbg/ex-info* \"Remote error\" (or data {}))))\n                          :pending   (Failure. (Pending.))\n                          :cancelled (Failure. (Cancelled.))))))\n\n(defn read-opts [] {:handlers (merge *read-handlers* {\"failure\" failure-reader})})\n\n(def set-ints\n  (partial reduce-kv\n    (fn [r i n]\n      (let [offset (bit-shift-left i 2)]\n        #?(:clj  (.putInt ^ByteBuffer r offset n)\n           :cljs (doto r (.setInt32 offset n)))))))\n\n(defn encode-numbers\n  \"Encode a control frame to a binary segment.\"\n  [xs]\n  (let [required (bit-shift-left (count xs) 2)] ; size of bytebuffer is 4 \u00d7 (count xs), so shift by 2\n    #?(:clj (set-ints (ByteBuffer/allocate required) xs)\n       :cljs (doto (js/ArrayBuffer. required)\n               (-> (js/DataView.) (set-ints xs))))))\n\n(defn decode-numbers\n  \"Decode a control frame from a binary segment.\"\n  [b]\n  (vec\n    (reify\n      #?(:clj IReduceInit :cljs IReduce)\n      #?(:clj (reduce [_ rf r]\n                (let [l (.limit ^ByteBuffer b)]\n                  (loop [r r, i (int 0)]\n                    (if (< i l)\n                      (recur (rf r (.getInt ^ByteBuffer b i))\n                        (unchecked-add-int i 4)) r))))\n         :cljs (-reduce [_ rf r]\n                 (let [l (.-byteLength b)\n                       v (js/DataView. b)]\n                   (loop [r r, i 0]\n                     (if (< i l)\n                       (recur (rf r (.getInt32 v i))\n                         (+ i 4)) r))))))))\n\n\n;; #?(:cljs (def transit-writer (t/writer :json (write-opts))))\n#?(:cljs (let [!cache (atom {:write-handlers *write-handlers*, :writer nil})]\n           (defn transit-writer []\n             (:writer (swap! !cache (fn [{:keys [write-handlers writer] :as cache}]\n                                      (if (= write-handlers *write-handlers*)\n                                        (if writer\n                                          cache\n                                          (assoc cache :writer (t/writer :json (write-opts))))\n                                        {:write-handlers *write-handlers*\n                                         :writer         (t/writer :json (write-opts))})))))))\n\n(defn encode\n  \"Encode a data frame to transit json\"\n  [x]\n  #?(:clj (let [out (ByteArrayOutputStream.)]\n            (t/write (t/writer out :json (write-opts)) x)\n            (.toString out))\n     :cljs (t/write (transit-writer) x)))\n\n;; #?(:cljs (def transit-reader (t/reader :json (read-opts))))\n#?(:cljs (let [!cache (atom {:read-handlers *read-handlers*, :reader nil})]\n           (defn transit-reader []\n             (:reader (swap! !cache (fn [{:keys [read-handlers reader] :as cache}]\n                                      (if (= read-handlers *read-handlers*)\n                                        (if reader\n                                          cache\n                                          (assoc cache :reader (t/reader :json (read-opts))))\n                                        {:read-handlers *read-handlers*\n                                         :reader        (t/reader :json (read-opts))})))))))\n\n\n(defn decode\n  \"Decode a data frame from transit json\"\n  [^String s]\n  #?(:clj (t/read (t/reader (ByteArrayInputStream. (.getBytes s \"UTF-8\")) :json (read-opts)))\n     :cljs (t/read (transit-reader) s)))\n\n(defn decode-str [x]\n  (try (doto (decode x) (->> (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3d\")))\n    (catch #?(:clj Throwable :cljs :default) t\n      (throw (ex-info \"Failed to decode\" {:value x} t)))))\n\n(tests \"FailureInfo\"\n  (def cause (ex-info \"boom\" {}))\n  (def ex (dbg/ex-info* \"x\" {} cause))\n  (def sent (-> ex Failure. encode decode .-error))\n  \"keeps the ID across the wire\"\n  (dbg/ex-id ex) := (dbg/ex-id sent)\n  \"can restore cause\"\n  (get-original-ex (dbg/ex-id sent)) := cause\n  nil)\n\n; Jetty rejects websocket payloads larger than 65536 bytes by default\n; We\u2019ll chop messages if needed\n(def chunk-size (bit-shift-right 65536 2))\n\n(defn ^:deprecated message-reader [?read]\n  \"Returns a discrete flow of read Electric messages from provided task, emitting individual frames.\"\n  (m/sp\n    (loop [data (transient [])]\n      (let [x (m/? ?read)]\n        (if (string? x)\n          (recur (conj! data (decode-str x)))\n          (persistent!\n            (conj! data\n              (loop [x       x\n                     control (transient [])]\n                (let [xs      (decode-numbers x)\n                      control (reduce conj! control xs)]\n                  (if (< (count xs) chunk-size) ; final frame\n                    (persistent! control)\n                    (recur (m/? ?read) control)))))))))))\n\n\n(defn ^:deprecated message-writer\n  \"Returns a function taking an Electric message and returning a task writing it as individual frames using provided\n   function. Might cut a message into chunks if its size would exceed the server payload limit.\n   An empty message (0b) is written to notify the end of frame.\"\n  [write]\n  #(m/sp\n     (loop [xs (seq (pop %))]\n       (if-some [[x & xs] xs]\n         (do (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3c\" x)\n           (m/? (write\n                  (try (encode x)\n                    (catch #?(:clj Throwable :cljs :default) t\n                      (throw (ex-info \"Failed to encode\" {:value x} t))))))\n           (recur xs))\n         (loop [xs (peek %)]\n           (if (>= (count xs) chunk-size)\n             (do (m/? (write (encode-numbers (subvec xs 0 chunk-size))))\n               (recur (subvec xs chunk-size)))\n             (m/? (write (encode-numbers xs)))))))))\n\n(defn ^:deprecated decoder\n  \"A transducer partitioning a sequence of network messages into Electric events.\"\n  [rf]\n  (let [data (doto (object-array 2)\n               (aset 0 []) (aset 1 []))]\n    (fn\n      ([] (rf))\n      ([r]\n       (assert (= [] (aget data 0) (aget data 1)))\n       (rf r))\n      ([r x]\n       (if (string? x)\n         (do (assert (= [] (aget data 1)))\n             (aset data 0 (conj (aget data 0) (decode-str x))) r)\n         (let [xs (decode-numbers x)]\n           (aset data 1 (into (aget data 1) xs))\n           (if (< (count xs) chunk-size)                  ; final frame\n             (let [x (conj (aget data 0) (aget data 1))]\n               (aset data 0 [])\n               (aset data 1 [])\n               (rf r x)) r)))))))\n\n(defn ^:deprecated encoder\n  \"A transducer expanding Electric events to a sequence of network messages.\"\n  [rf]\n  (fn\n    ([] (rf))\n    ([r] (rf r))\n    ([r x]\n     (let [r (reduce rf r (eduction (map encode) (pop x)))\n           r (reduce rf r (eduction (partition-all chunk-size) (map encode-numbers) (peek x)))]\n       (case (mod (count (peek x)) chunk-size)\n         0 (rf r (encode-numbers [])) r)))))\n\n(defn foreach\n  ([r] r)\n  ([r x] (r x) r))\n"]}