{"version":3,"sources":["missionary/impl/Watch.cljs"],"mappings":";AAGA,AAAA;AAAA,AACA,AAAA;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,+CAAA,WAAAA,1DAASU;;AAAT,AAAA,IAAAT,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,gDAAA,WAAAF,OAAAG,lEAASM;;AAAT,AAAA,IAAAT,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,wEAAA,xEAASM;;AAAT,AAAA,YAAA,RAEYM;AAFZ,AAEkB,CAACC,2DAAAA,kEAAAA,TAAKD,8CAAAA;;AAFxB;;;AAAA,CAAA,AAAA,0EAAA,1EAASN,qFAIEM;;AAJX,AAAA,gBAAA,ZAIWA;AAJX,AAIiB,QAACE,+DAAAA,0EAAAA,bAASF,sDAAAA;;;AAJ3B,CAAA,yCAAA,zCAASN;AAAT,AAAA,AAAA;;;AAAA,CAAA,+CAAA,/CAASA;;AAAT,CAAA,kDAAA,lDAASA;;AAAT,CAAA,uDAAA,WAAAJ,mBAAAC,qBAAAC,1GAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;qCAAA,rCAASI,kFAASC,SAASC,WAAWC,UAAUC;AAAhD,AAAA,YAAAL,8BAAkBE,SAASC,WAAWC,UAAUC;;;AAAvCL,AAMT,8BAAA,9BAAMS,oEAAgBC,GAAGC,EAAEA,MAAEC;AAA7B,AACE,IAAAC,qBAAe,AAAYH;AAA3B,AAAA,GAAA,CAAAG,sBAAA;AAAA;;AAAA,SAAAA,LAAYC;AAAZ,AACE,IAAMC,IAAE,AAASL;AAAjB,AACE,CAAM,AAASA,WAAIE;;AACnB,GAAM,CAAYG,MAAEL;AAApB,AAAwB,QAACI,mCAAAA,qCAAAA;;AAAzB;;;;AAEN,6BAAA,7BAAMP,kEAAeG;AAArB,AACE,IAAAG,qBAAe,AAAYH;AAA3B,AAAA,GAAA,CAAAG,sBAAA;AAAA;;AAAA,SAAAA,LAAYC;AAAZ,AACE,eAAA,dAAM,AAAYJ;;AAClB,IAAMK,IAAE,AAASL;AAAjB,AACE,YAAA,XAAM,AAASA;;AACf,GAAM,CAAYK,MAAEL;AAApB,AAAwB,QAACI,mCAAAA,qCAAAA;;AAAzB;;;;AAEN,iCAAA,jCAAMN,0EAAmBE;AAAzB,AACE,GAAI,gBAAA,fAAM,AAAYA;AACpB,AAAI,IAAAM,qBAAC,AAAcN;AAAf,AAAA,CAAAM,mDAAAA,qDAAAA;;AACA,AAACC,uBAAa,AAAaP,aAAIA;;AAC/B,MAAO,KAAAQ,qBAAA;;AACX,IAAMH,IAAE,AAASL;AAAjB,AACE,CAAM,AAASA,WAAIA;;AAAIK;;;AAE7B,4BAAA,5BAAMI,gEAAKC,EAAEC,EAAEC;AAAf,AACE,IAAMZ,KAAG,yCAAA,AAAAa,zCAACtB,mCAAUoB,EAAEC,EAAEF,kBAAGA;AAA3B,AACE,AAACI,oBAAUJ,EAAEV,GAAGD;;AAChB,CAACY,kCAAAA,oCAAAA;;AAAGX","names":["unused__11938__auto__","self__","G__39839","js/Error","args39838","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Watch/Process","missionary.impl.Watch/->Process","notifier","terminator","reference","value","this","missionary.impl.Watch/kill","missionary.impl.Watch/transfer","missionary.impl.Watch/watch","ps","_","curr","temp__5808__auto__","cb","x","fexpr__39862","cljs.core/remove-watch","js/missionary.Cancelled","missionary.impl.Watch/run","r","n","t","cljs.core/deref","cljs.core/add-watch"],"sourcesContent":["(ns ^:no-doc missionary.impl.Watch\n  (:import missionary.Cancelled))\n\n(declare kill transfer)\n(deftype Process [notifier terminator reference value]\n  IFn\n  (-invoke [this] (kill this) nil)\n  IDeref\n  (-deref [this] (transfer this)))\n\n(defn watch [^Process ps _ _ curr]\n  (when-some [cb (.-notifier ps)]\n    (let [x (.-value ps)]\n      (set! (.-value ps) curr)\n      (when (identical? x ps) (cb)))))\n\n(defn kill [^Process ps]\n  (when-some [cb (.-notifier ps)]\n    (set! (.-notifier ps) nil)\n    (let [x (.-value ps)]\n      (set! (.-value ps) nil)\n      (when (identical? x ps) (cb)))))\n\n(defn transfer [^Process ps]\n  (if (nil? (.-notifier ps))\n    (do ((.-terminator ps))\n        (remove-watch (.-reference ps) ps)\n        (throw (Cancelled. \"Watch cancelled.\")))\n    (let [x (.-value ps)]\n      (set! (.-value ps) ps) x)))\n\n(defn run [r n t]\n  (let [ps (->Process n t r @r)]\n    (add-watch r ps watch)\n    (n) ps))\n"]}