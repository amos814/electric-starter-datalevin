{"version":3,"sources":["missionary/impl/Reduce.cljs"],"mappings":";AAEA,AAAA;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,gDAAA,WAAAA,3DAASU;;AAAT,AAAA,IAAAT,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,iDAAA,WAAAF,OAAAG,nEAASM;;AAAT,AAAA,IAAAT,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,yEAAA,zEAASM;;AAAT,AAAA,QAAA,JAKYS;AALZ,AAKe,QAACH,6CAAAA,+CAAAA;;;AALhB,CAAA,0CAAA,1CAASN;AAAT,AAAA,AAAA;;;AAAA,CAAA,gDAAA,hDAASA;;AAAT,CAAA,mDAAA,nDAASA;;AAAT,CAAA,wDAAA,WAAAJ,mBAAAC,qBAAAC,3GAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;sCAAA,tCAASI,oFACNC,QAAQC,OAAOC,QAAQC,OAAOC,MACrBC,KACAC;AAHZ,AAAA,YAAAR,+BACGE,QAAQC,OAAOC,QAAQC,OAAOC,MACrBC,KACAC;;;AAHHR,AAOT,kCAAA,lCAAMU,4EAAmBC;AAAzB,AACE,QAAM,AAAUA,WACd,iBAAA,AACE,IAAME,IAAE,AAAWF;IACbG,IAAE,AAAUH;IACZG,QAAE,EAAI,CAAYA,MAAEH,IAChB,CAACE,kCAAAA,oCAAAA,cAAG,iBAAAE,WAAGD;IAAHE,WAAA,AAAAC,gBAAM,AAASN;AAAf,AAAA,0EAAAI,SAAAC,wBAAAD,SAAAC,5GAACH,kCAAAA,qDAAAA;;AAHf,AAIE,GAAI,AAACK,yBAASJ;AACZ,AAAI,IAAAK,qBAAC,AAASR;AAAV,AAAA,CAAAQ,mDAAAA,qDAAAA;;AAAc,aAAA,ZAAM,AAAWR;;AAAnC,OAAAM,gBAA4CH;;AAAGA;;gBANrD,QAAAF,JAOkBQ;AAPlB,AAQI,IAAAC,qBAAC,AAASV;AAAV,AAAA,CAAAU,mDAAAA,qDAAAA;;AAAc,aAAA,ZAAM,AAAWV;;AAC/B,CAAM,AAAUA,WAAG,AAAWA;;AAAIS;;;AAE1C,+BAAA,/BAAME,sEAAgBX;AAAtB,AACE;AAAA,AACE,oBAAM,CAAM,AAAQA,SAAG,AAACY,cAAI,AAAQZ;AAApC,AACE,oBAAI,AAAQA;AACV,IAAAa,WAAc,AAAUb;IAAxBc,eAAC,AAAUd;AAAX,AAAA,QAAAc,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AACA,AAAI,GAAI,cAAA,bAAM,AAAWb;AACnB,IAAA,AAAA,AAAAM,gBAAM,AAASN;gBAAf,cAAAe,VAAkCjB;AAAlC,AAAA;AACA,AAACC,gCAASC;;;AAAI;;;AALxB;;;;;AAOJ,6BAAA,7BAAMgB,kEAAKC,GAAGC,KAAKC,QAAQ1B;AAA3B,AACE,IAAMO,IAAE,uDAAA,KAAA,KAAA,KAAA,tEAACV,oCAAU2B,GAAGE,QAAQ1B;AAA9B,AACE,CAAM,AAAUO,WAAGA;;AACnB,CAAM,AAASA,UACb,iBAAAoB,WAAA;AAAA,AAAO,OAACT,6BAAMX;;IAAdqB,WAAA;AAAA,AACG,AAAI,UAAA,TAAM,AAAQrB;;AAAS,OAACW,6BAAMX;;AADrC,AAAA,gFAAAoB,SAAAC,2BAAAD,SAAAC,rHAACH,qCAAAA,wDAAAA;;;AAEH,AAACnB,gCAASC;;AACV,AAACW,6BAAMX;;AAAGA","names":["unused__11938__auto__","self__","G__39478","js/Error","args39477","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Reduce/Process","missionary.impl.Reduce/->Process","reducer","status","failure","result","input","busy","done","_","missionary.impl.Reduce/transfer","p","e39487","f","r","G__39491","G__39492","cljs.core/deref","cljs.core/reduced?","fexpr__39494","e","fexpr__39488","missionary.impl.Reduce/ready","cljs.core/not","G__39503","fexpr__39499","e39504","missionary.impl.Reduce/run","rf","flow","success","G__39508","G__39509"],"sourcesContent":["(ns ^:no-doc missionary.impl.Reduce)\n\n(deftype Process\n  [reducer status failure result input\n   ^boolean busy\n   ^boolean done]\n  IFn\n  (-invoke [_] (input)))\n\n(defn transfer [^Process p]\n  (set! (.-result p)\n    (try\n      (let [f (.-reducer p)\n            r (.-result p)\n            r (if (identical? r p)\n                (f) (f r @(.-input p)))]\n        (if (reduced? r)\n          (do ((.-input p)) (set! (.-reducer p) nil) @r) r))\n      (catch :default e\n        ((.-input p)) (set! (.-reducer p) nil)\n        (set! (.-status p) (.-failure p)) e))))\n\n(defn ready [^Process p]\n  (loop []\n    (when (set! (.-busy p) (not (.-busy p)))\n      (if (.-done p)\n        ((.-status p) (.-result p))\n        (do (if (nil? (.-reducer p))\n              (try @(.-input p) (catch :default _))\n              (transfer p)) (recur))))))\n\n(defn run [rf flow success failure]\n  (let [p (->Process rf success failure nil nil true false)]\n    (set! (.-result p) p)\n    (set! (.-input p)\n      (flow #(ready p)\n        #(do (set! (.-done p) true) (ready p))))\n    (transfer p)\n    (ready p) p))\n"]}