{"version":3,"sources":["missionary/impl/Relieve.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__39495","js/Error","args39490","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Relieve/Process","missionary.impl.Relieve/->Process","reducer","notifier","terminator","iterator","current","busy","done","_","p","missionary.impl.Relieve/transfer","ps","x","fexpr__39496","missionary.impl.Relieve/ready","cb","cljs.core/not","temp__5806__auto__","n","r","e39512","cljs.core/deref","fexpr__39524","e","fexpr__39518","e39511","missionary.impl.Relieve/run","rf","f","t","G__39526","G__39528","temp__5808__auto__"],"sourcesContent":["(ns ^:no-doc missionary.impl.Relieve)\n\n(declare transfer)\n(deftype Process [reducer notifier terminator iterator current ^boolean busy ^boolean done]\n  IFn\n  (-invoke [_] (iterator))\n  IDeref\n  (-deref [p] (transfer p)))\n\n(defn transfer [^Process ps]\n  (let [x (.-current ps)]\n    (set! (.-current ps) ps)\n    (when (nil? (.-reducer ps))\n      ((.-terminator ps)))\n    (if (nil? (.-notifier ps))\n      (throw x) x)))\n\n(defn ready [^Process ps]\n  (loop [cb nil]\n    (if (set! (.-busy ps) (not (.-busy ps)))\n      (recur (if (.-done ps)\n               (do (set! (.-reducer ps) nil)\n                   (if (identical? ps (.-current ps))\n                     (.-terminator ps) cb))\n               (if-some [n (.-notifier ps)]\n                 (let [r (.-current ps)]\n                   (try (let [x @(.-iterator ps)]\n                          (set! (.-current ps)\n                            (if (identical? r ps)\n                              x ((.-reducer ps) r x))))\n                        (catch :default e\n                          (set! (.-current ps) e)\n                          (set! (.-notifier ps) nil)\n                          ((.-iterator ps))))\n                   (if (identical? r ps) n cb))\n                 (do (try @(.-iterator ps) (catch :default _)) cb)))) cb)))\n\n(defn run [rf f n t]\n  (let [ps (->Process rf n t nil nil true false)]\n    (set! (.-current ps) ps)\n    (set! (.-iterator ps)\n      (f #(when-some [cb (ready ps)] (cb))\n        #(do (set! (.-done ps) true)\n             (when-some [cb (ready ps)] (cb)))))\n    (when-some [cb (ready ps)] (cb)) ps))"]}