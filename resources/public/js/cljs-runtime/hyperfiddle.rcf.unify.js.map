{"version":3,"sources":["hyperfiddle/rcf/unify.cljc"],"mappings":"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","names":["hyperfiddle.rcf.unify/wildcard?","x","cljs.core._EQ_","hyperfiddle.rcf.unify/&?","form","cljs.core/seqable?","cljs.core/first","hyperfiddle.rcf.unify/lvar?","cljs.core/Symbol","cljs.core/name","hyperfiddle.rcf.unify/failed?","env","cljs.core/contains?","hyperfiddle.rcf.unify/unify-in-env","y","y'","cljs.core.get","cljs.core.assoc","hyperfiddle.rcf.unify/wildcard-in-env","v","cljs.core.update_in","cljs.core/conj","var_args","G__37458","hyperfiddle.rcf.unify/resolve*","js/Error","k","hyperfiddle.rcf.unify.resolve_STAR_","path","cljs.core.conj","hyperfiddle.rcf.unify/ground","cljs.core/map?","cljs.core/reduce-kv","_v","cljs.core.update","xs","cljs.core.mapv","hyperfiddle.rcf.unify/unify-set","ys","cljs.core/seq","clojure.set.intersection","G__37464","G__37465","G__37466","clojure.set.difference","G__37492","G__37493","G__37494","hyperfiddle.rcf.unify/unify","G__37495","G__37496","G__37497","cljs.core/rest","hyperfiddle.rcf.unify/replace-keys","m","ks-map","r","cljs.core.dissoc","or__5045__auto__","cljs.core/set","cljs.core/keys","hyperfiddle.rcf.unify/unify-map","cljs.core.reduce","G__37507","G__37508","G__37509","cljs.core/find","cljs.core/reduced","clojure.set.union","hyperfiddle.rcf.unify/collection?","G__37511","hyperfiddle.rcf.unify.unify","cljs.core/second","and__5043__auto__","cljs.core/set?","cljs.core/every?","cljs.core.fnil","hyperfiddle.rcf.unify/subst","idx","cljs.core/volatile!","get-idx!","clojure.walk/prewalk","expr","cljs.core.get_in","hyperfiddle.rcf.unify/unifier*","hyperfiddle.rcf.unify/unifier","cljs.core.comp","hyperfiddle.rcf.unify/explain","temp__5804__auto__","fail","temp__5806__auto__","vec__37546","cljs.core.nth","a","b","cljs.core.pr_str","vec__37540","vec__37543","lvar","temp__5808__auto__","cljs.core.filter","cljs.core/map-entry?","cljs.core.map","cljs.core/key","cljs.core.into"],"sourcesContent":[";; Adapted from `https://github.com/clojure/core.unify` which was not cljs\n;; compatible out of the box.\n\n(ns hyperfiddle.rcf.unify\n  (:require [clojure.walk :as walk]\n            [clojure.set :as set]))\n\n(defn wildcard? [x] (= '_ x))\n\n(defn &? [form] (and (seqable? form) (= '& (first form))))\n\n(defn lvar? [x] (and (symbol? x) (= \\? (first (name x)))))\n\n(defn failed? [env] (contains? env ::fail))\n\n(defn unify-in-env [x y env]\n  (if (contains? env x)\n    (let [y' (get env x)]\n      (if (= y y')\n        env\n        (if (lvar? y')\n          (unify-in-env y' y env)\n          (assoc env ::fail {x [y' y]}))))\n    (assoc env x y)))\n\n(defn wildcard-in-env [v env]\n  (if (contains? env '_)\n    (update-in env ['_] conj v)\n    (assoc env '_ [v])))\n\n(defn resolve*\n  ([env k]\n   (resolve* [] env k))\n  ([path env k]\n   (if (= k (first path))\n     ::cycle\n     (let [v (get env k)]\n       (if (lvar? v)\n         (resolve* (conj path k) env v)\n         v)))))\n\n(defn ground [env]\n  (if (map? env)\n    (let [env (reduce-kv (fn [env k _v] (assoc env k (resolve* env k))) env env)]\n      (if (contains? env '_)\n        (update env '_ (fn [xs] (mapv (fn [x] (if (lvar? x) (get env x) x)) xs)))\n        env))\n    env))\n\n(declare unify)\n\n(defn unify-set [xs ys env]\n  (if (seq (set/intersection xs ys))\n    (unify-set (set/difference xs ys) (set/difference ys xs) env)\n    (let [env (unify (first xs) (first ys) env)]\n      (if (failed? env)\n        env\n        (unify (rest xs) (rest ys) env)))))\n\n(defn replace-keys [m ks-map]\n  (reduce-kv (fn [r k v]\n               (-> (dissoc r k)\n                   (assoc (if (= k '_)\n                            (or (first (set/difference (set (get ks-map '_)) (set (keys r))))\n                                '_)\n                            (get ks-map k k))\n                          v)))\n             m m))\n\n(defn unify-map [xs ys env]\n  (let [env (unify-set (set (keys xs)) (set (keys ys)) env)\n        xs  (replace-keys xs env)\n        ys  (replace-keys ys env)]\n    (if (= xs ys)\n      env\n      (reduce (fn [env k]\n                (let [env (unify (find xs k) (find ys k) env)]\n                  (if (failed? env)\n                    (reduced env)\n                    env)))\n              env (set/union (set (keys xs)) (set (keys ys)))))))\n\n;; Javascript do not have chars. So iterating a string always produce more strings -> StackOverflow.\n(defn collection? [x] (and (seqable? x) (not (string? x))))\n\n(defn unify\n  ([x y] (unify x y {}))\n  ([x y env]\n   (let [env (cond\n               (failed? env)              env\n               (wildcard? x)              (wildcard-in-env y env)\n               (wildcard? y)              (wildcard-in-env x env)\n               (= x y)                    env\n               (&? x)                     (if (seq y)\n                                            (unify (second x) (seq y) env)\n                                            env)\n               (&? y)                     (if (seq x)\n                                            (unify (second y) (seq x) env)\n                                            env)\n               (lvar? x)                  (unify-in-env x y env)\n               (lvar? y)                  (unify-in-env y x env)\n               (and (set? x) (set y))     (unify-set x y env)\n               (and (map? x) (map? y))    (unify-map x y env)\n               (every? collection? [x y]) (let [env (unify (first x) (first y) env)]\n                                            (if (failed? env)\n                                              env\n                                              (unify (rest x) (rest y) env)))\n               :else                      (assoc env ::fail {::root [x y]}))]\n     (if (failed? env)\n       (update env ::path (fnil conj ()) x)\n       env))))\n\n(defn subst [form env]\n  (let [idx      (volatile! -1)\n        get-idx! (fn [] (vswap! idx inc))]\n    (if (map? env)\n      (walk/prewalk (fn [expr] (cond\n                                 (lvar? expr)     (get env expr expr)\n                                 (wildcard? expr) (get-in env ['_ (get-idx!)] '_)\n                                 :else            expr))\n                    form)\n      form)))\n\n(defn unifier* [x y]\n  (let [env (unify x y)]\n    (if (failed? env)\n      [::fail env]\n      (let [env (ground env)]\n        [(subst y env) env]))))\n\n(def unifier (comp first unifier*))\n\n(defn explain [env]\n  (when-let [fail (::fail env)]\n    (str \"Failed to unify \"\n         (if-some [[a b] (::root fail)]\n           (str (pr-str a) \" and \" (pr-str b))\n           (let [[lvar [a b]] (first fail)]\n             (str (pr-str lvar) \" with \" (pr-str a) \" and \" (pr-str b))))\n         (when-some [path (seq (->> (::path env) (filter map-entry?) (map key)))]\n           (str \" in \" (into [] path))))))"]}