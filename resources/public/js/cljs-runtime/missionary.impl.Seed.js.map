{"version":3,"sources":["missionary/impl/Seed.cljs"],"mappings":";AAGA,AAAA;AAAA,AACA,AAAA;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,8CAAA,WAAAA,zDAASU;;AAAT,AAAA,IAAAT,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,+CAAA,WAAAF,OAAAG,jEAASM;;AAAT,AAAA,IAAAT,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,uEAAA,vEAASM;;AAAT,AAAA,SAAA,LAGYK;AAHZ,AAGgB,QAACC,4DAAAA,gEAAAA,NAAOD,4CAAAA;;;AAHxB,CAAA,AAAA,yEAAA,zEAASL,oFAKEK;;AALX,AAAA,aAAA,TAKWA;AALX,AAKe,QAACE,8DAAAA,sEAAAA,VAASF,kDAAAA;;;AALzB,CAAA,wCAAA,xCAASL;AAAT,AAAA,AAAA;;;AAAA,CAAA,8CAAA,9CAASA;;AAAT,CAAA,iDAAA,jDAASA;;AAAT,CAAA,sDAAA,WAAAJ,mBAAAC,qBAAAC,zGAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;oCAAA,pCAASI,gFACNC,SAASC,SAASC;AADrB,AAAA,YAAAJ,6BACGE,SAASC,SAASC;;;AADZJ,AAOT,8BAAA,9BAAMM,oEAAiBD;AAAvB,AACE,sBAAA,dAAM,AAAYA;;AAEpB,4BAAA,5BAAMG,gEAAeH,GAAGI;AAAxB,AACE,oBAAI,AAAUA;AACZ,IAAAC,eAAC,AAAYL;AAAb,AAAA,QAAAK,6CAAAA,+CAAAA;;AACA,AAAI,eAAA,dAAM,AAAYL;;AAClB,IAAAM,eAAC,AAAcN;AAAf,AAAA,QAAAM,6CAAAA,+CAAAA;;;AAER,gCAAA,hCAAMJ,wEAAmBF;AAAzB,AACE,IAAAO,qBAAY,AAAYP;AAAxB,AAAA,GAAA,CAAAO,sBAAA;AAGE,AAAI,IAAAE,qBAAC,AAAcT;AAAf,AAAA,CAAAS,mDAAAA,qDAAAA;;AACA,MAAO,KAAAC,qBAAA;;AAJb,QAAAH,JAAUH;AAAV,AACE,IAAMI,IAAE,AAAOJ;AAAf,AACE,AAACD,0BAAKH,GAAGI;;AAAGI;;;AAIlB,2BAAA,3BAAMG,8DAAKC,KAAKC,EAAEC;AAAlB,AACE,IAAMV,IAAE,AAACW,eAAKH;IACRZ,KAAG,AAACJ,kCAAUQ,EAAES,EAAEC;AADxB,AAEE,AAACX,0BAAKH,GAAGI;;AAAGJ","names":["unused__11938__auto__","self__","G__40314","js/Error","args40313","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Seed/Process","missionary.impl.Seed/->Process","iterator","notifier","terminator","ps","missionary.impl.Seed/cancel","missionary.impl.Seed/transfer","missionary.impl.Seed/more","i","fexpr__40318","fexpr__40319","temp__5806__auto__","x","fexpr__40320","js/missionary.Cancelled","missionary.impl.Seed/run","coll","n","t","cljs.core/iter"],"sourcesContent":["(ns missionary.impl.Seed\n  (:import missionary.Cancelled))\n\n(declare cancel transfer)\n(deftype Process\n  [iterator notifier terminator]\n  IFn\n  (-invoke [ps] (cancel ps))\n  IDeref\n  (-deref [ps] (transfer ps)))\n\n(defn cancel [^Process ps]\n  (set! (.-iterator ps) nil))\n\n(defn more [^Process ps i]\n  (if (.hasNext i)\n    ((.-notifier ps))\n    (do (set! (.-iterator ps) nil)\n        ((.-terminator ps)))))\n\n(defn transfer [^Process ps]\n  (if-some [i (.-iterator ps)]\n    (let [x (.next i)]\n      (more ps i) x)\n    (do ((.-terminator ps))\n        (throw (Cancelled. \"Seed cancelled\")))))\n\n(defn run [coll n t]\n  (let [i (iter coll)\n        ps (->Process i n t)]\n    (more ps i) ps))\n"]}