{"version":3,"sources":["hyperfiddle/rcf/queue.cljs"],"mappings":"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","names":["hyperfiddle$rcf$queue$IObservableQueue$put_BANG_$dyn","x__5393__auto__","m__5394__auto__","hyperfiddle.rcf.queue/put!","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","hyperfiddle$rcf$queue$IObservableQueue$take_BANG_$dyn","hyperfiddle.rcf.queue/take!","hyperfiddle$rcf$queue$IObservableQueue$_empty_QMARK_$dyn","hyperfiddle.rcf.queue/-empty?","hyperfiddle$rcf$queue$IObservableQueue$observe_BANG_$dyn","hyperfiddle.rcf.queue/observe!","hyperfiddle$rcf$queue$IObservableQueue$unobserve_BANG_$dyn","hyperfiddle.rcf.queue/unobserve!","hyperfiddle.rcf.queue/IObservableQueue","this","val","callback","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hyperfiddle.rcf.queue/ObservableArray","hyperfiddle.rcf.queue/->ObservableArray","arr","observers","temp__5802__auto__","observer","_this","cljs.core._EQ_","idx","hyperfiddle.rcf.queue/queue","hyperfiddle.rcf.queue/get-queue","q","cljs.core/seq","var_args","G__37487","hyperfiddle.rcf.queue/poll!","js/Error","_","cljs.core.ex_info","start","timeout","missing-value","now","hyperfiddle.rcf.time/current-time","hyperfiddle.rcf.time/timeout?","resolved?","cljs.core/volatile!","resolve","cljs.core/deref","cljs.core/vreset!","js/setTimeout","hyperfiddle.rcf.time/remaining","hyperfiddle.rcf.queue/poll-n!","n","cljs.core/nat-int?","hyperfiddle.rcf.queue.poll_BANG_","x","G__37498","G__37499","G__37500","G__37501","G__37502","G__37503","cljs.core.partial","hyperfiddle.rcf.queue/offer!","v"],"sourcesContent":["(ns hyperfiddle.rcf.queue\n  (:require [hyperfiddle.rcf.time :as time]))\n\n(defprotocol IObservableQueue\n  (put! [this val])\n  (take! [this])\n  (-empty? [this])\n  (observe! [this callback])\n  (unobserve! [this callback]))\n\n(deftype ObservableArray [^js arr, observers]\n  IObservableQueue\n  (put! [this val]\n    (if-let [observer (.shift observers)]\n      (observer val)\n      (.push arr val))\n    this)\n  (take! [_this] (.shift arr))\n  (-empty? [_this] (= 0 (.-length arr)))\n  (observe! [_this callback] (.push observers callback))\n  (unobserve! [_this callback]\n    (let [idx (.indexOf observers callback)]\n      (when (> idx -1)\n        (.splice observers idx 1)))))\n\n(defn queue [] (ObservableArray. #js [] #js []))\n\n(defn get-queue [^js q]\n  (seq (.-arr q)))\n\n(defn poll! \n  ([_ _ _ _] (throw (ex-info \"Blocking poll not available on a JS runtime.\" {})))\n  ([^js q start timeout missing-value callback]\n   (let [now (time/current-time)]\n     (if (time/timeout? now start timeout)\n       (callback missing-value)\n       (let [resolved? (volatile! false)\n             resolve   (fn [val] (when-not @resolved?\n                                   (vreset! resolved? true)\n                                   (callback val)))]\n         (if (-empty? q)\n           (do (observe! q resolve)\n               (js/setTimeout (fn []\n                                (unobserve! q resolve)\n                                (resolve missing-value))\n                              (time/remaining now start timeout)))\n           (resolve (take! q))))))))\n\n(defn poll-n! [^js q start timeout missing-value n callback]\n  (assert (nat-int? n))\n  (poll! q start timeout missing-value\n         (fn [x]\n           (if (= 1 n)\n             (callback x)\n             (poll-n! q start timeout missing-value (dec n) (partial callback x))))))\n\n(defn offer! [q v]\n  (put! q v)\n  v)\n"]}