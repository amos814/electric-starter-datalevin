{"version":3,"sources":["missionary/impl/Observe.cljs"],"mappings":";AAGA,AAAA;AAAA,AAEA,AAAA;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,iDAAA,WAAAA,5DAASU;;AAAT,AAAA,IAAAT,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,kDAAA,WAAAF,OAAAG,pEAASM;;AAAT,AAAA,IAAAT,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,0EAAA,1EAASM;;AAAT,AAAA,YAAA,RAEYM;AAFZ,AAEkB,CAACC,6DAAAA,oEAAAA,TAAKD,gDAAAA;;AAFxB;;;AAAA,CAAA,AAAA,4EAAA,5EAASN,uFAIEM;;AAJX,AAAA,gBAAA,ZAIWA;AAJX,AAIiB,QAACE,iEAAAA,4EAAAA,bAASF,wDAAAA;;;AAJ3B,CAAA,2CAAA,3CAASN;AAAT,AAAA,AAAA;;;AAAA,CAAA,iDAAA,jDAASA;;AAAT,CAAA,oDAAA,pDAASA;;AAAT,CAAA,yDAAA,WAAAJ,mBAAAC,qBAAAC,5GAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;uCAAA,vCAASI,sFAASC,SAASC,WAAWC,MAAMC;AAA5C,AAAA,YAAAL,gCAAkBE,SAASC,WAAWC,MAAMC;;;AAAnCL,AAMT,+BAAA,/BAAMO,sEAAeE;AAArB,AACE,IAAAC,qBAAe,AAAYD;AAA3B,AAAA,GAAA,CAAAC,sBAAA;AAAA;;AAAA,SAAAA,LAAYC;AAAZ,AACE,eAAA,dAAM,AAAYF;;AAClB,IAAMG,IAAE,AAASH;AAAjB,AACE,YAAA,XAAM,AAASA;;AACf,GAAM,CAAYG,MAAEH;AAApB,AAAwB,QAACE,mCAAAA,qCAAAA;;AAAzB;;;;AAEN,mCAAA,nCAAMH,8EAAmBC;AAAzB,AACE,GAAI,gBAAA,fAAM,AAAYA;AACpB,AAAI,IAAAI,qBAAC,AAAcJ;AAAf,AAAA,CAAAI,mDAAAA,qDAAAA;;AACA,IAAAC,qBAAC,AAASL;AAAV,AAAA,CAAAK,mDAAAA,qDAAAA;;AACA,MAAO,KAAAC,qBAAA;;AACX,IAAMH,IAAE,AAASH;AAAjB,AACE,CAAM,AAASA,WAAIA;;AAAIG;;;AAE7B,8BAAA,9BAAMI,oEAAKC,EAAEC,EAAEC;AAAf,AACE,IAAMV,KAAG,yCAAA,KAAA,9CAACR,qCAAUiB,EAAEC;AAAtB,AACE,CAAM,AAASV,WAAIA;;AACnB,IAAA,AAAK,CAAM,AAASA,WACb,iBAAAY,WAAG,WAAKT;AAAL,AACE,IAAAF,qBAAe,AAAYD;AAA3B,AAAA,GAAA,CAAAC,sBAAA;AAAA;;AAAA,SAAAA,LAAYC;AAAZ,AACE,GAAI,CAAYF,OAAG,AAASA;AAC1B,AAAI,CAAM,AAASA,WAAIG;;AAAG,QAACD,mCAAAA,qCAAAA;;AAC3B,MAAO,KAAAlB,MAAA;;;;AAJhB,AAAA,0EAAA4B,wBAAAA,1FAACJ,kCAAAA,4CAAAA;;gBADR,cAAAG,VAMqBE;AANrB,AAOO,YAAA,XAAM,AAASb;;AACf,eAAA,dAAM,AAAYA;;AAClB,YAAA,XAAM,AAASA;AAAf,AAAoB,MAAOa;;;AAC3B,CAACJ,kCAAAA,oCAAAA;;AAAKT","names":["unused__11938__auto__","self__","G__39996","js/Error","args39989","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Observe/Process","missionary.impl.Observe/->Process","notifier","terminator","unsub","value","this","missionary.impl.Observe/kill","missionary.impl.Observe/transfer","ps","temp__5808__auto__","cb","x","fexpr__40063","fexpr__40071","js/missionary.Cancelled","missionary.impl.Observe/run","s","n","t","e40077","G__40078","e"],"sourcesContent":["(ns ^:no-doc missionary.impl.Observe\n  (:import missionary.Cancelled))\n\n(declare kill transfer)\n\n(deftype Process [notifier terminator unsub value]\n  IFn\n  (-invoke [this] (kill this) nil)\n  IDeref\n  (-deref [this] (transfer this)))\n\n(defn kill [^Process ps]\n  (when-some [cb (.-notifier ps)]\n    (set! (.-notifier ps) nil)\n    (let [x (.-value ps)]\n      (set! (.-value ps) nil)\n      (when (identical? x ps) (cb)))))\n\n(defn transfer [^Process ps]\n  (if (nil? (.-notifier ps))\n    (do ((.-terminator ps))\n        ((.-unsub ps))\n        (throw (Cancelled. \"Observe cancelled.\")))\n    (let [x (.-value ps)]\n      (set! (.-value ps) ps) x)))\n\n(defn run [s n t]\n  (let [ps (->Process n t nil nil)]\n    (set! (.-value ps) ps)\n    (try (set! (.-unsub ps)\n           (s (fn [x]\n                (when-some [cb (.-notifier ps)]\n                  (if (identical? ps (.-value ps))\n                    (do (set! (.-value ps) x) (cb))\n                    (throw (js/Error. \"Can't process event - consumer is not ready.\")))))))\n         (catch :default e\n           (set! (.-value ps) nil)\n           (set! (.-notifier ps) nil)\n           (set! (.-unsub ps) #(throw e))\n           (n))) ps))\n\n"]}