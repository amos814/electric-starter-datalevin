{"version":3,"sources":["missionary/impl/Reductions.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__39480","js/Error","args39479","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Reductions/Process","missionary.impl.Reductions/->Process","reducer","notifier","terminator","result","input","busy","done","_","p","missionary.impl.Reductions/transfer","missionary.impl.Reductions/ready","cb","cljs.core/not","cljs.core/deref","e39510","ps","e39513","f","r","G__39520","G__39521","cljs.core/reduced?","fexpr__39523","e","fexpr__39514","temp__5808__auto__","missionary.impl.Reductions/run","rf","n","t","G__39527","G__39529"],"sourcesContent":["(ns ^:no-doc missionary.impl.Reductions)\n\n(declare transfer)\n(deftype Process [reducer notifier terminator result input ^boolean busy ^boolean done]\n  IFn\n  (-invoke [_] (input))\n  IDeref\n  (-deref [p] (transfer p)))\n\n(defn ready [^Process p]\n  (loop [cb nil]\n    (if (set! (.-busy p) (not (.-busy p)))\n      (if (.-done p)\n        (.-terminator p)\n        (if (nil? (.-reducer p))\n          (do (try @(.-input p) (catch :default _))\n              (recur cb)) (.-notifier p))) cb)))\n\n(defn transfer [^Process ps]\n  (try\n    (let [f (.-reducer ps)\n          r (.-result ps)\n          r (if (identical? r ps)\n              (f) (f r @(.-input ps)))]\n      (set! (.-result ps)\n        (if (reduced? r)\n          (do ((.-input ps))\n              (set! (.-reducer ps) nil)\n              @r) r)))\n    (catch :default e\n      ((.-input ps))\n      (set! (.-notifier ps) nil)\n      (set! (.-reducer ps) nil)\n      (set! (.-result ps) e)))\n  (when-some [cb (ready ps)] (cb))\n  (if (nil? (.-notifier ps))\n    (throw (.-result ps))\n    (.-result ps)))\n\n(defn run [rf f n t]\n  (let [ps (->Process rf n t nil nil true false)]\n    (set! (.-result ps) ps)\n    (set! (.-input ps)\n      (f #(when-some [cb (ready ps)] (cb))\n        #(do (set! (.-done ps) true)\n             (when-some [cb (ready ps)]\n               (cb))))) (n) ps))\n"]}