{"version":3,"sources":["hyperfiddle/electric/impl/eventually.cljc"],"mappings":";AAGA,AAAA;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,yDAAA,WAAAA,pEAASU;;AAAT,AAAA,IAAAT,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,0DAAA,WAAAF,OAAAG,5EAASM;;AAAT,AAAA,IAAAT,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,kFAAA,lFAASM;;AAAT,AAAA,QAAA,JAEkCM;AAFlC,AAGI,IAAAC,eAAC,CAAMF,aAAM,CAAA,MAAA;AAAb,AAAA,QAAAE,6CAAAA,+CAAAA;;;AAHJ,CAAA,AAAA,oFAAA,pFAASP,+FAKuBQ;;AALhC,AAAA,aAAA,TAKgCA;AALhC,AAMI,AACE,GAAI,gCAAA,/BAAM,CAAMH,aAAM,CAAA,MAAA;AACpB,AAAI,CAACD,kDAAAA,oDAAAA;;AAAYF;;AACjB,IAAA,AAAK,6BAAA,5BAAMG,aAAM,CAAA,MAAA;;AACZ,QAAA,AAAAK,JAAMC,oBAAG,CAAMN,aAAM,CAAA,MAAA;AAArB,AACE,GAAI,gCAAA,/BAAM,CAAMA,aAAM,CAAA,MAAA;AACpB,CAAMA,aAAM,CAAA,MAAA,QAAQF;;AACpB,AAAI,6BAAA,5BAAME,aAAM,CAAA,MAAA;;AACZ,CAACF,gDAAAA,kDAAAA;;;AAAYQ;gBAL1B,QAAAF,JAM8CG;AAN9C,AAOO,GAAI,gCAAA,/BAAM,CAAMP,aAAM,CAAA,MAAA;AACpB,CAAMA,aAAM,CAAA,MAAA,QAAQD;;AACpB,AAAI,6BAAA,5BAAMC,aAAM,CAAA,MAAA;;AACZ,CAACD,kDAAAA,oDAAAA;;;AAAc,MAAOQ;;;;AAnB3C,CAAA,mDAAA,nDAASZ;AAAT,AAAA,AAAA;;;AAAA,CAAA,yDAAA,zDAASA;;AAAT,CAAA,4DAAA,5DAASA;;AAAT,CAAA,iEAAA,WAAAJ,mBAAAC,qBAAAC,pHAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;+CAAA,/CAASI,sGAAIC,OAAMC,SAASC,WAAoBC;AAAhD,AAAA,YAAAL,wCAAaE,OAAMC,SAASC,WAAoBC;;;AAAvCL,AAqBT;;;;kDAAA,lDAAMa,4GAEHF,EAAEG;AAFL,AAGE,kBAAKC,EAAEC;AAAP,AACE,IAAMX,QAAM,qDAAA,rDAACY;IACPT,KAAG,AAACP,6CAAKU,EAAEI,EAAEC,EAAEX;AADrB,AAEE,AACE,CAAMA,MAAM,CAAA,MAAA,QAAQU;;AACpB,CAAMV,MAAM,CAAA,MAAA,QACV,iBAAAa,WAAGH;IAAHI,WAAA;AAAA,AAAM,AACE,IAAAC,qBAAa,CAAMf,MAAM,CAAA,MAAA;AAAzB,AAAA,GAAA,CAAAe,sBAAA;AAEE,QAAMf,MAAM,CAAA,MAAA,QAAQG;;AAFtB,SAAAY,LAAUC;AAAV,AACE,AAAI,sBAAA,rBAAMhB,MAAM,CAAA,MAAA;;AAAa,QAACgB,mCAAAA,qCAAAA;;;AAFxC,AAAA,0EAAAH,SAAAC,wBAAAD,SAAAC,5GAACL,kCAAAA,qDAAAA;;;AAGqCN","names":["unused__11938__auto__","self__","G__40771","js/Error","args40770","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hyperfiddle.electric.impl.eventually/It","hyperfiddle.electric.impl.eventually/->It","final","notifier","terminator","state","_","fexpr__40772","it","e40775","cljs.core/deref","x","e","hyperfiddle.electric.impl.eventually/eventually","f","n","t","cljs.core.object_array","G__40793","G__40794","temp__5806__auto__","cb"],"sourcesContent":["(ns hyperfiddle.electric.impl.eventually\n  #?(:clj (:import (clojure.lang IFn IDeref))))\n\n(deftype It [final notifier terminator ^objects state]\n  IFn\n  (#?(:clj invoke :cljs -invoke) [_]\n    ((aget state (int 0))))\n  IDeref\n  (#?(:clj deref :cljs -deref) [it]\n    (locking it\n      (if (nil? (aget state (int 1)))\n        (do (terminator) final)\n        (try (aset state (int 1) nil)\n             (let [x @(aget state (int 0))]\n               (if (nil? (aget state (int 1)))\n                 (aset state (int 1) notifier)\n                 (do (aset state (int 1) nil)\n                     (notifier))) x)\n             (catch #?(:clj Throwable :cljs :default) e\n               (if (nil? (aget state (int 1)))\n                 (aset state (int 1) terminator)\n                 (do (aset state (int 1) nil)\n                     (terminator))) (throw e)))))))\n\n(defn eventually \"\nReturns a flow producing successive values of given flow, followed by given value if it terminates successfully.\n\" [x f]\n  (fn [n t]\n    (let [state (object-array 2)\n          it (->It x n t state)]\n      (locking it\n        (aset state (int 1) n)\n        (aset state (int 0)\n          (f n #(locking it\n                  (if-some [cb (aget state (int 1))]\n                    (do (aset state (int 1) nil) (cb))\n                    (aset state (int 1) it))))) it))))"]}