{"version":3,"sources":["missionary/impl/RaceJoin.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__40263","js/Error","args40253","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.RaceJoin/Process","missionary.impl.RaceJoin/->Process","combinator","joincb","racecb","children","result","join","race","j","missionary.impl.RaceJoin/cancel","n__5636__auto__","i","fexpr__40273","missionary.impl.RaceJoin/terminated","n","w","e40279","G__40282","fexpr__40281","e","fexpr__40280","G__40284","fexpr__40283","missionary.impl.RaceJoin/run","r","c","ts","s","f","cljs.core/count","cljs.core/iter","cljs.core.object_array","index","x","G__40295","G__40296","fexpr__40294"],"sourcesContent":["(ns missionary.impl.RaceJoin)\n\n(declare cancel)\n(deftype Process\n  [combinator\n   joincb racecb\n   children result\n   ^number join\n   ^number race]\n  IFn\n  (-invoke [j] (cancel j)))\n\n(defn cancel [^Process j]\n  (dotimes [i (alength (.-children j))]\n    ((aget (.-children j) i))))\n\n(defn terminated [^Process j]\n  (let [n (inc (.-join j))]\n    (set! (.-join j) n)\n    (when (== n (alength (.-result j)))\n      (let [w (.-race j)]\n        (if (neg? w)\n          (try ((.-joincb j) (.apply (.-combinator j) nil (.-result j)))\n               (catch :default e ((.-racecb j) e)))\n          ((.-racecb j) (aget (.-result j) w)))))))\n\n(defn run [r c ts s f]\n  (let [n (count ts)\n        i (iter ts)\n        j (->Process c (if r f s) (if r s f) (object-array n) (object-array n) 0 -2)]\n    (loop [index 0]\n      (let [join (fn [x]\n                   (aset (.-result j) index x)\n                   (terminated j))\n            race (fn [x]\n                   (let [w (.-race j)]\n                     (when (neg? w)\n                       (set! (.-race j) index)\n                       (when (== -1 w) (cancel j))))\n                   (join x))]\n        (aset (.-children j) index ((.next i) (if r race join) (if r join race)))\n        (when (.hasNext i) (recur (inc index)))))\n    (if (== -2 (.-race j))\n      (set! (.-race j) -1)\n      (cancel j)) j))"]}