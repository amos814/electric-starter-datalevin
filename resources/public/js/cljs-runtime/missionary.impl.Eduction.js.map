{"version":3,"sources":["missionary/impl/Eduction.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__40315","js/Error","args40312","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Eduction/Process","missionary.impl.Eduction/->Process","reducer","iterator","notifier","terminator","buffer","offset","length","error","busy","done","t","missionary.impl.Eduction/cancel","missionary.impl.Eduction/transfer","var_args","G__40317","missionary.impl.Eduction/feed","x","missionary.impl.Eduction/pull","temp__5806__auto__","rf","e40323","e","missionary.impl.Eduction.feed","fexpr__40324","cljs.core/not","fexpr__40321","e40333","cljs.core/reduced?","G__40334","G__40335","cljs.core/deref","fexpr__40337","e40329","_","fexpr__40338","o","fexpr__40339","missionary.impl.Eduction/run","xf","flow","n","cljs.core.object_array","G__40348","G__40349"],"sourcesContent":["(ns missionary.impl.Eduction)\n\n(declare cancel transfer)\n(deftype Process\n  [reducer iterator\n   notifier terminator\n   buffer\n   ^number offset\n   ^number length\n   ^number error\n   ^boolean busy\n   ^boolean done]\n  IFn\n  (-invoke [t] (cancel t))\n  IDeref\n  (-deref [t] (transfer t)))\n\n(defn feed\n  ([^Process t] t)\n  ([^Process t x]\n   (if (== (.-length t) (alength (.-buffer t)))\n     (.push (.-buffer t) x)\n     (aset (.-buffer t) (.-length t) x))\n   (set! (.-length t) (inc (.-length t))) t))\n\n(defn pull [^Process t]\n  (loop []\n    (if (.-done t)\n      (if-some [rf (.-reducer t)]\n        (do (set! (.-offset t) 0)\n            (set! (.-length t) 0)\n            (try (rf t)\n                 (catch :default e\n                   (set! (.-error t) (.-length t))\n                   (feed t e)))\n            (set! (.-reducer t) nil)\n            (if (zero? (.-length t))\n              (recur)\n              (do ((.-notifier t))\n                  (when (set! (.-busy t) (not (.-busy t))) (recur)))))\n        ((.-terminator t)))\n      (if-some [rf (.-reducer t)]\n        (do (set! (.-offset t) 0)\n            (set! (.-length t) 0)\n            (try (when (reduced? (rf t @(.-iterator t)))\n                   (rf t)\n                   (set! (.-reducer t) nil)\n                   (cancel t))\n                 (catch :default e\n                   (set! (.-error t) (.-length t))\n                   (feed t e)\n                   (set! (.-reducer t) nil)\n                   (cancel t)))\n            (if (pos? (.-length t))\n              ((.-notifier t))\n              (when (set! (.-busy t) (not (.-busy t))) (recur))))\n        (do (try @(.-iterator t) (catch :default _))\n            (when (set! (.-busy t) (not (.-busy t))) (recur)))))))\n\n(defn cancel [^Process t]\n  ((.-iterator t)))\n\n(defn transfer [^Process t]\n  (let [o (.-offset t)\n        x (aget (.-buffer t) o)]\n    (aset (.-buffer t) o nil)\n    (set! (.-offset t) (inc o))\n    (if (== (.-offset t) (.-length t))\n      (when (set! (.-busy t) (not (.-busy t)))\n        (pull t)) ((.-notifier t)))\n    (if (== o (.-error t)) (throw x) x)))\n\n(defn run [xf flow n t]\n  (let [t (->Process (xf feed) nil n t (object-array 1) 0 0 -1 true false)\n        n #(when (set! (.-busy t) (not (.-busy t))) (pull t))]\n    (set! (.-iterator t) (flow n #(do (set! (.-done t) true) (n))))\n    (n) t))"]}