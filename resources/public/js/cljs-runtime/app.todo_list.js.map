{"version":3,"sources":["app/todo_list.cljc"],"mappings":";AAQA,AAGA,AAgBA,AASA,AAkBA","names":[],"sourcesContent":["(ns app.todo-list\n  (:require contrib.str\n            #?(:clj [datalevin.core :as d]) ; database on server\n            [hyperfiddle.electric :as e]\n            [hyperfiddle.electric-dom2 :as dom]\n            [hyperfiddle.electric-ui4 :as ui]))\n\n#?(:clj (defonce !conn (d/get-conn \"/tmp/datalevin/mydb\"))) ; database on server\n(e/def db) ; injected database ref; Electric defs are always dynamic\n\n\n(e/defn TodoItem [id]\n  (e/server\n    (let [e (d/entity db id)\n          status (:task/status e)]\n      (e/client\n        (dom/div\n          (ui/checkbox\n            (case status :active false, :done true)\n            (e/fn [v]\n              (e/server\n                (d/transact! !conn [{:db/id id\n                                     :task/status (if v :done :active)}])\n                nil))\n            (dom/props {:id id}))\n          (dom/label (dom/props {:for id}) (dom/text (e/server (:task/description e)))))))))\n\n(e/defn InputSubmit [F]\n  ; Custom input control using lower dom interface for Enter handling\n  (dom/input (dom/props {:placeholder \"Buy milk\"})\n    (dom/on \"keydown\" (e/fn [e]\n                        (when (= \"Enter\" (.-key e))\n                          (when-some [v (contrib.str/empty->nil (-> e .-target .-value))]\n                            (new F v)\n                            (set! (.-value dom/node) \"\")))))))\n\n(e/defn TodoCreate []\n  (e/client\n    (InputSubmit. (e/fn [v]\n                    (e/server\n                      (d/transact! !conn [{:task/description v\n                                           :task/status :active}])\n                      nil)))))\n\n#?(:clj (defn todo-count [db]\n          (count\n            (d/q '[:find [?e ...] :in $ ?status\n                   :where [?e :task/status ?status]] db :active))))\n\n#?(:clj (defn todo-records [db]\n          (->> (d/q '[:find [(pull ?e [:db/id :task/description]) ...]\n                      :where [?e :task/status]] db)\n            (sort-by :task/description))))\n\n(e/defn Todo-list []\n  (e/server\n    (binding [db (e/watch !conn)]\n      (e/client\n        (dom/link (dom/props {:rel :stylesheet :href \"/todo-list.css\"}))\n        (dom/h1 (dom/text \"tzq todo list\"))\n        (dom/p (dom/text \"it's multiplayer, try two tabs\"))\n        (dom/div (dom/props {:class \"todo-list\"})\n          (TodoCreate.)\n          (dom/div {:class \"todo-items\"}\n            (e/server\n              (e/for-by :db/id [{:keys [db/id]} (todo-records db)]\n                (TodoItem. id))))\n          (dom/p (dom/props {:class \"counter\"})\n            (dom/span (dom/props {:class \"count\"}) (dom/text (e/server (todo-count db))))\n            (dom/text \" items left\")))))))"]}