{"version":3,"sources":["hyperfiddle/electric/impl/local.cljc"],"mappings":"","names":[],"sourcesContent":["(ns hyperfiddle.electric.impl.local\n  #?(:cljs (:require-macros [hyperfiddle.electric.impl.local :refer [local get-local set-local with-local]])))\n\n(defmacro local []\n  (if (:js-globals &env) `(volatile! nil) `(ThreadLocal.)))\n\n(defmacro get-local [l]\n  (if (:js-globals &env) `(deref ~l) `(.get ~(with-meta l (assoc (meta l) :tag `ThreadLocal)))))\n\n(defmacro set-local [l x]\n  (if (:js-globals &env) `(vreset! ~l ~x) `(doto ~x (->> (.set ~(with-meta l (assoc (meta l) :tag `ThreadLocal)))))))\n\n(defmacro with-local [l i & body]\n  `(let [prev# (get-local ~l)]\n     (set-local ~l ~i)\n     (try [(do ~@body) (get-local ~l)]\n          (finally (set-local ~l prev#)))))\n"]}