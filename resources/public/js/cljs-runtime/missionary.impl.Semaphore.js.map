{"version":3,"sources":["missionary/impl/Semaphore.cljs"],"mappings":";AAGA,gCAAA,hCAAMA;AAAN,AAAA;;AAEA,AAAA;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,gDAAA,WAAAC,3DAASU;;AAAT,AAAA,IAAAT,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD;;;KAAA;AAAA,OAAAA,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,iDAAA,WAAAF,OAAAG,nEAASM;;AAAT,AAAA,IAAAT,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,yEAAA,zEAASM;;AAAT,AAAA,QAAA,JAGYI;AAHZ,AAII,IAAAC,qBAAc,AAACI,cAAIN;AAAnB,AAAA,GAAA,CAAAE,sBAAA;AAEE,AAAI,CAAMH,mBAAU,oBAAA,nBAAKA;;AAAzB;;AAFF,IAAAI,aAAAD;aAAA,AAAAE,4CAAAD,WAAA,IAAA,pEAAWE;AAAX,AACE,AAAI,CAAML,iBAAQ,AAACO,6CAAKP,eAAQK;;AAAI,QAACA,uCAAAA,yCAAAA;;;;AAL3C,CAAA,AAAA,yEAAA,zEAASR,oFAOKW,QAAGC;;AAPjB,AAAA,QAAA,JAOYR;AAPZ,AAQI,GAAI,sBAAA,rBAAOF;AACT,aAAA,TAAMM;AAAN,AAAS,sFAAA,0BAAA,xGAACG,wCAAAA,8CAAAA;;AAAV,AACE,CAAMR,iBAAQ,AAACU,6CAAKV,eAAQK;;AAD9B;AAAA,AAEG,GAAM,AAACM,0BAAUX,eAAQK;AAAzB,AACE,CAAML,iBAAQ,AAACO,6CAAKP,eAAQK;;AAC5B,IAAAO,WAAI,KAAAC,qBAAA;AAAJ,AAAA,sFAAAD,8BAAAA,5GAACH,wCAAAA,kDAAAA;;AAFH;;;;AAGH,AAAI,CAAMV,mBAAU,oBAAA,nBAAKA;;AACrB,+EAAA,0BAAA,xGAACS,wCAAAA,8CAAAA;;AAAQtB;;;;AAfnB,CAAA,0CAAA,1CAASW;AAAT,AAAA,AAAA;;;AAAA,CAAA,gDAAA,hDAASA;;AAAT,CAAA,mDAAA,nDAASA;;AAAT,CAAA,wDAAA,WAAAJ,mBAAAC,qBAAAC,3GAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;sCAAA,tCAASI,oFAAgBC,UACAC;AADzB,AAAA,YAAAH,+BAAyBE,UACAC;;;AADhBH,AAiBT,iCAAA,jCAAMiB,0EAAMC;AAAZ,AAAe,6CAAA,tCAACjB,oCAAOiB","names":["missionary.impl.Semaphore/nop","unused__11938__auto__","self__","G__40249","js/Error","args40248","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Semaphore/Port","missionary.impl.Semaphore/->Port","available","readers","_","temp__5806__auto__","vec__40269","cljs.core.nth","!","cljs.core/seq","cljs.core.disj","s!","f!","cljs.core.conj","cljs.core/contains?","G__40288","js/missionary.Cancelled","missionary.impl.Semaphore/make","n"],"sourcesContent":["(ns missionary.impl.Semaphore\n  (:import missionary.Cancelled))\n\n(defn nop [])\n\n(deftype Port [^:mutable available\n               ^:mutable readers]\n  IFn\n  (-invoke [_]\n    (if-some [[!] (seq readers)]\n      (do (set! readers (disj readers !)) (!))\n      (do (set! available (inc available)) nil)))\n  (-invoke [_ s! f!]\n    (if (zero? available)\n      (let [! #(s! nil)]\n        (set! readers (conj readers !))\n        #(when (contains? readers !)\n           (set! readers (disj readers !))\n           (f! (Cancelled. \"Semaphore acquire cancelled.\"))))\n      (do (set! available (dec available))\n          (s! nil) nop))))\n\n(defn make [n] (->Port n #{}))"]}