{"version":3,"sources":["missionary/impl/GroupBy.cljs"],"mappings":"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","names":["unused__11938__auto__","self__","G__39493","js/Error","args39489","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.GroupBy/Process","missionary.impl.GroupBy/->Process","keyfn","notifier","terminator","key","value","input","table","load","live","busy","done","p","missionary.impl.GroupBy/kill","n","t","missionary.impl.GroupBy/group","missionary.impl.GroupBy/sample","G__39498","args39497","missionary.impl.GroupBy/Group","missionary.impl.GroupBy/->Group","process","g","missionary.impl.GroupBy/cancel","missionary.impl.GroupBy/consume","fexpr__39501","missionary.impl.GroupBy/step","i","m","k","s","cljs.core/hash","G__39522","cljs.core._EQ_","ss","mm","larger","cljs.core.object_array","n__5636__auto__","temp__5808__auto__","h","j","G__39525","fexpr__39532","missionary.impl.GroupBy/transfer","cljs.core/not","fexpr__39551","fexpr__39552","e39553","G__39557","fexpr__39556","cljs.core/deref","temp__5806__auto__","fexpr__39559","fexpr__39558","e","fexpr__39554","fexpr__39555","e39560","_","cljs.core/->MapEntry","fexpr__39561","js/missionary.Cancelled","x","missionary.impl.GroupBy/run","f","G__39562","G__39563"],"sourcesContent":["(ns ^:no-doc missionary.impl.GroupBy\n  (:import missionary.Cancelled))\n\n(declare kill group sample cancel consume)\n\n(deftype Process [keyfn notifier terminator\n                  key value input table\n                  ^number load\n                  ^boolean live\n                  ^boolean busy\n                  ^boolean done]\n  IFn\n  (-invoke [p] (kill p) nil)\n  (-invoke [p n t] (group p n t))\n  IDeref\n  (-deref [p] (sample p)))\n\n(deftype Group [process key notifier terminator]\n  IFn\n  (-invoke [g] (cancel g) nil)\n  IDeref\n  (-deref [g] (consume g)))\n\n(defn kill [^Process p]\n  (when (.-live p)\n    (set! (.-live p) false)\n    ((.-input p))))\n\n(defn step [^number i ^number m]\n  (bit-and (inc i) m))\n\n(defn group [^Process p n t]\n  (let [k (.-key p)\n        g (->Group p k n t)\n        table (.-table p)]\n    (when-not (identical? k p)\n      (set! (.-key p) p)\n      (let [s (alength table)\n            m (dec s)]\n        (loop [i (bit-and (hash k) m)]\n          (case (aget table i)\n            nil (aset table i g)\n            (recur (step i m))))\n        (let [ss (bit-shift-left s 1)]\n          (when (<= ss (* 3 (set! (.-load p) (inc (.-load p)))))\n            (let [mm (dec ss)\n                  larger (object-array ss)]\n              (set! (.-table p) larger)\n              (dotimes [i s]\n                (when-some [h (aget table i)]\n                  (loop [j (bit-and (hash (.-key h)) mm)]\n                    (case (aget larger j)\n                      nil (aset larger j h)\n                      (recur (step j mm)))))))))))\n    (n) g))\n\n(defn cancel [^Group g]\n  (let [^Process p (.-process g)\n        k (.-key g)]\n    (when (.-live p)\n      (when-not (identical? k p)\n        (set! (.-key g) p)\n        (let [table (.-table p)\n              m (dec (alength table))\n              i (loop [i (bit-and (hash k) m)]\n                  (if (identical? g (aget table i))\n                    i (recur (step i m))))]\n          (aset table i nil)\n          (set! (.-load p) (dec (.-load p)))\n          (loop [i (step i m)]\n            (when-some [h (aget table i)]\n              (let [j (bit-and (hash (.-key h)) m)]\n                (when-not (== i j)\n                  (aset table i nil)\n                  (loop [j j]\n                    (if (nil? (aget table j))\n                      (aset table j h)\n                      (recur (step j m))))))\n              (recur (step i m))))\n          ((if (= k (.-key p))\n             (.-notifier p)\n             (.-notifier g))))))))\n\n(defn transfer [^Process p]\n  (loop []\n    (when (set! (.-busy p) (not (.-busy p)))\n      (if (.-done p)\n        (do (set! (.-live p) false)\n            (when-some [table (.-table p)]\n              (set! (.-table p) nil)\n              (dotimes [i (alength table)]\n                (when-some [g (aget table i)]\n                  ((.-terminator g)))))\n            ((.-terminator p)))\n        (if (identical? p (.-value p))\n          (let [table (.-table p)]\n            (try\n              (let [k (set! (.-key p) ((.-keyfn p) (set! (.-value p) @(.-input p))))\n                    m (dec (alength table))]\n                (loop [i (bit-and (hash k) m)]\n                  (if-some [h (aget table i)]\n                    (if (= k (.-key h))\n                      ((.-notifier h))\n                      (recur (step i m)))\n                    ((.-notifier p)))))\n              (catch :default e\n                (set! (.-value p) e)\n                (set! (.-table p) nil)\n                (kill p)\n                (dotimes [i (alength table)]\n                  (when-some [g (aget table i)]\n                    ((.-terminator g))))\n                ((.-notifier p)))))\n          (do (try @(.-input p) (catch :default _))\n              (recur)))))))\n\n(defn sample [^Process p]\n  (let [k (.-key p)]\n    (if (identical? k p)\n      (do (transfer p) (throw (.-value p)))\n      (->MapEntry k p nil))))\n\n(defn consume [^Group g]\n  (let [^Process p (.-process g)]\n    (if (identical? p (.-key g))\n      (do ((.-terminator g))\n          (throw (Cancelled. \"Group consumer cancelled.\")))\n      (let [x (.-value p)]\n        (set! (.-value p) p)\n        (set! (.-key p) p)\n        (transfer p) x))))\n\n(defn run [k f n t]\n  (let [p (->Process k n t nil nil nil (object-array 8) 0 true true false)]\n    (set! (.-key p) p)\n    (set! (.-value p) p)\n    (set! (.-input p)\n      (f #(transfer p)\n        #(do (set! (.-done p) true)\n             (transfer p))))\n    (transfer p) p))\n"]}