{"version":3,"sources":["missionary/impl/Sequential.cljs"],"mappings":";AAIA,iCAAA,jCAAMA;AAAN,AAAA;;AAEA,AAAA;AAAA,AAEA,AAAA;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,oDAAA,WAAAC,/DAASW;;AAAT,AAAA,IAAAV,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,qDAAA,WAAAF,OAAAG,vEAASO;;AAAT,AAAA,IAAAV,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,6EAAA,7EAASO;;AAAT,AAAA,YAAA,RAEYW;AAFZ,AAEkB,CAACC,gEAAAA,uEAAAA,TAAKD,mDAAAA;;AAFxB;;;AAAA,CAAA,AAAA,4EAAAhB,5EAASK;;AAAT,CAAA,AAAA,wFAAA,xFAASA,mGAIAW,MAAKE;;AAJd,AAAA,gBAAA,ZAISF;AAJT,AAIoB,QAACG,mEAAAA,mFAAAA,lBAAQH,+DAAAA,rDAAKE,+DAAAA;;;AAJlC,CAAA,AAAA,yFAAA,zFAASb,oGAKCe,EAAEA;;AALZ,AAAA,YAAA,RAKUA;AALV,AAKe,MAAO,KAAAvB,MAAA;;;AALtB,CAAA,AAAA,wFAAA,xFAASQ,mGAMAe,EAAEA,MAAEA;;AANb,AAAA,YAAA,RAMSA;AANT,AAMgB,MAAO,KAAAvB,MAAA;;;AANvB,CAAA,AAAA,yFAAA,zFAASQ,oGAOCe;;AAPV,AAAA,YAAA,RAOUA;AAPV,AAOa,GAAM,iBAAA,hBAAML;AAAZ,AAAmB,MAAO,KAAAM,qBAAA;;AAA1B;;;;AAPb,CAAA,AAAA,0FAAA,1FAAShB,qGAQEW;;AARX,AAAA,gBAAA,ZAQWA;AARX,AASI,IAAMM,IAAER;AAAR,AACE,qBAAA,pBAAM,AAAWE;;AACjB,GAAMH;AAAN,AACE,oBAAA,nBAAM,AAAUG;;AAChB,MAAOM;;AAFT;;AAEaA;;;AAbnB,CAAA,8CAAA,9CAASjB;AAAT,AAAA,AAAA;;;AAAA,CAAA,oDAAA,pDAASA;;AAAT,CAAA,uDAAA,vDAASA;;AAAT,CAAA,4DAAA,WAAAJ,mBAAAC,qBAAAC,/GAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;0CAAA,1CAASI,4FAASC,UAAUC,QAAQC,QAAQC,OAAOC,QAAiBC,KAAcC,OAAOC,QAAQC;AAAjG,AAAA,YAAAV,mCAAkBE,UAAUC,QAAQC,QAAQC,OAAOC,QAAiBC,KAAcC,OAAOC,QAAQC;;;AAAxFV,AAeT,kCAAA,lCAAMY,4EAAeM;AAArB,AACE,IAAAC,qBAAc,AAASD;AAAvB,AAAA,GAAA,CAAAC,sBAAA;AAAA;;AAAA,QAAAA,JAAYC;AAAZ,AACE,YAAA,XAAM,AAASF;;AAAS,QAACE,kCAAAA,oCAAAA;;;AAE7B,qCAAA,rCAAMN,kFAAkBI,GAAGL;AAA3B,AACE,IAAMO,UAAE,iBAAAC,WAAM,AAAUH;IAAhBI,WACE,AAAWJ;AADb,AAAA,gFAAAG,SAAAC,2BAAAD,SAAAC,rHAACT,qCAAAA,wDAAAA;;AAAT,AAEE,GAAI,aAAA,ZAAM,AAASK;AACjB,CAACE,wCAAAA,0CAAAA;;AAAG,CAAM,AAASF,WAAIE;;;AAAKF;;AAElC,kCAAA,lCAAMK,4EAAeL;AAArB,AACE,oBAAM,CAAM,AAAQA,UAAI,AAACM,cAAI,AAAQN;AAArC,AACE,IAAMO,OAAKC;AAAX,AACE,CAAMA,8BAAMR;;AACZ,IAAA,AACE;AAAA,AACE,IAAMD,UAAE,iBAAAW,eAAC,AAAaV;AAAd,AAAA,QAAAU,6CAAAA,+CAAAA;;AAAR,AACE,GAAI,CAAYX,YAAEC;AAChB,oBAAM,CAAM,AAAQA,UAAI,AAACM,cAAI,AAAQN;AAArC,AACE;;AADF;;AACW,IAAAW,qBAAC,AAAWX;AAAZ,AAAA,CAAAW,mDAAAA,4DAAAA,XAAgBZ,wCAAAA;;;;gBALnC,cAAAU,VAMkBG;AANlB,AAOI,IAAAC,qBAAC,AAAWb;AAAZ,AAAA,CAAAa,mDAAAA,4DAAAA,XAAgBD,wCAAAA;;AACpB,QAAMJ,8BAAMD;;AAXhB;;;AAaF,iCAAA,jCAAMO,0EAAKC,GAAGC,EAAEC;AAAhB,AACE,IAAMjB,KAAG,+CAAA,KAAA,KAAA,MAAA,MAAA,rEAACjB,wCAAUgC,GAAGC,EAAEC,6BAA0B/C;AAAnD,AACE,CAAM,AAAU8B,YACd,WAAKD;AAAL,AACE,CAAM,AAAWC,aAAID;;AACrB,AAACM,gCAAKL;;AAFR;;;AAGF,CAAM,AAAWA,aACf,WAAKY;AAAL,AACE,aAAA,ZAAM,AAAUZ;;AAChB,CAAM,AAAWA,aAAIY;;AACrB,AAACP,gCAAKL;;AAHR;;;AAIF,AAACK,gCAAKL;;AAAIA","names":["missionary.impl.Sequential/nop","unused__11938__auto__","self__","G__39810","js/Error","args39808","cljs.core/aclone","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Sequential/Process","missionary.impl.Sequential/->Process","coroutine","success","failure","resume","rethrow","busy","failed","current","token","this","missionary.impl.Sequential/kill","task","missionary.impl.Sequential/suspend","_","js/missionary.Cancelled","x","ps","temp__5808__auto__","c","G__39822","G__39823","missionary.impl.Sequential/step","cljs.core/not","prev","missionary.impl.Fiber/fiber","e39831","fexpr__39833","fexpr__39835","e","fexpr__39832","missionary.impl.Sequential/run","cr","s","f"],"sourcesContent":["(ns ^:no-doc missionary.impl.Sequential\n  (:require [missionary.impl.Fiber :refer [Fiber fiber]])\n  (:import missionary.Cancelled))\n\n(defn nop [])\n\n(declare kill suspend)\n\n(deftype Process [coroutine success failure resume rethrow ^boolean busy ^boolean failed current token]\n  IFn\n  (-invoke [this] (kill this) nil)\n  Fiber\n  (park [this task] (suspend this task))\n  (swich [_ _] (throw (js/Error. \"Unsupported operation.\")))\n  (fork [_ _ _] (throw (js/Error. \"Unsupported operation.\")))\n  (check [_] (when (nil? token) (throw (Cancelled. \"Process cancelled.\"))))\n  (unpark [this]\n    (let [x current]\n      (set! (.-current this) nil)\n      (when failed\n        (set! (.-failed this) false)\n        (throw x)) x)))\n\n(defn kill [^Process ps]\n  (when-some [c (.-token ps)]\n    (set! (.-token ps) nil) (c)))\n\n(defn suspend [^Process ps task]\n  (let [c (task (.-resume ps)\n            (.-rethrow ps))]\n    (if (nil? (.-token ps))\n      (c) (set! (.-token ps) c))) ps)\n\n(defn step [^Process ps]\n  (when (set! (.-busy ps) (not (.-busy ps)))\n    (let [prev fiber]\n      (set! fiber ps)\n      (try\n        (loop []\n          (let [x ((.-coroutine ps))]\n            (if (identical? x ps)\n              (when (set! (.-busy ps) (not (.-busy ps)))\n                (recur)) ((.-success ps) x))))\n        (catch :default e\n          ((.-failure ps) e)))\n      (set! fiber prev))))\n\n(defn run [cr s f]\n  (let [ps (->Process cr s f nil nil false false nil nop)]\n    (set! (.-resume ps)\n      (fn [x]\n        (set! (.-current ps) x)\n        (step ps) nil))\n    (set! (.-rethrow ps)\n      (fn [e]\n        (set! (.-failed ps) true)\n        (set! (.-current ps) e)\n        (step ps) nil))\n    (step ps) ps))"]}